/** A truthy string or falsy values */
export declare type ValidationResponse = string | null | undefined | false;
/** The return value of a validator */
export declare type ValidatorResponse = ValidationResponse | Promise<ValidationResponse>;
/**
 * A validator simply takes a value and returns a string or Promise<string>
 * If a truthy string is returned it represents a validation error
 **/
export interface Validator<TValue> {
    (value: TValue): ValidatorResponse;
}
/**
 * Runs the value through a list of validators.
 * - As soon as a validation error is detected, the error is returned
 * - As soon as a validator dies unexpectedly (throws an error), we throw the same error.
 */
export declare function applyValidators<TValue>(value: TValue, validators: Validator<TValue>[]): Promise<string | null | undefined>;
/** Anything that provides this interface can be plugged into the validation system */
export interface Validatable<TValue> {
    validating: boolean;
    validate(): Promise<{
        hasError: true;
    } | {
        hasError: false;
        value: TValue;
    }>;
    hasError: boolean;
    error?: string | null | undefined;
    $: TValue;
    enableAutoValidation: () => void;
    disableAutoValidation: () => void;
}
/**
 * Composible fields (fields that work in conjuction with a parent FormState)
 */
export interface ComposibleValidatable<TValue> extends Validatable<TValue> {
    /** Allows a convinient reset for all fields */
    reset: () => void;
    /** Used to tell the parent about validation */
    _on$ValidationPass: () => void;
    _on$Reinit: () => void;
    /** Used by the parent to register listeners */
    _setCompositionParent: (config: {
        on$ValidationPass: () => void;
        on$Reinit: () => void;
    }) => void;
}
