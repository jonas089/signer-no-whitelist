{"ast":null,"code":"/*\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/rpc.ts\n */\nimport { Tunnel } from './tunnel';\nexport class Rpc {\n  constructor(options) {\n    this.tunnel = void 0;\n    this.methods = void 0;\n    options.messageHandler = this.messageHandler.bind(this);\n    this.tunnel = new Tunnel(options);\n    this.methods = new Map();\n  }\n\n  call(method) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    const msg = {\n      method,\n      params\n    };\n    return this.tunnel.send(msg);\n  }\n\n  register(name, method) {\n    this.methods.set(name, method);\n  }\n\n  messageHandler(msg, caller) {\n    const method = this.methods.get(msg.method);\n\n    if (method === undefined) {\n      throw new Error('Unregistered method call: ' + msg.method);\n    }\n\n    return method.call(caller, ...msg.params);\n  }\n\n}","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/lib/rpc/rpc.ts"],"names":["Tunnel","Rpc","constructor","options","tunnel","methods","messageHandler","bind","Map","call","method","params","msg","send","register","name","set","caller","get","undefined","Error"],"mappings":"AAAA;AACA;AACA;AACA,SAAiBA,MAAjB,QAA8C,UAA9C;AASA,OAAO,MAAMC,GAAN,CAAU;AAIfC,EAAAA,WAAW,CAACC,OAAD,EAAyB;AAAA,SAH5BC,MAG4B;AAAA,SAF5BC,OAE4B;AAClCF,IAAAA,OAAO,CAACG,cAAR,GAAyB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAzB;AAEA,SAAKH,MAAL,GAAc,IAAIJ,MAAJ,CAAWG,OAAX,CAAd;AACA,SAAKE,OAAL,GAAe,IAAIG,GAAJ,EAAf;AACD;;AAEDC,EAAAA,IAAI,CAAeC,MAAf,EAAiD;AAAA,sCAAfC,MAAe;AAAfA,MAAAA,MAAe;AAAA;;AACnD,UAAMC,GAAG,GAAG;AACVF,MAAAA,MADU;AAEVC,MAAAA;AAFU,KAAZ;AAKA,WAAO,KAAKP,MAAL,CAAYS,IAAZ,CAAyBD,GAAzB,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACC,IAAD,EAAeL,MAAf,EAAmC;AACzC,SAAKL,OAAL,CAAaW,GAAb,CAAiBD,IAAjB,EAAuBL,MAAvB;AACD;;AAEOJ,EAAAA,cAAc,CAACM,GAAD,EAAsBK,MAAtB,EAAsC;AAC1D,UAAMP,MAAM,GAAG,KAAKL,OAAL,CAAaa,GAAb,CAAiBN,GAAG,CAACF,MAArB,CAAf;;AAEA,QAAIA,MAAM,KAAKS,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,+BAA+BR,GAAG,CAACF,MAA7C,CAAN;AACD;;AAED,WAAOA,MAAM,CAACD,IAAP,CAAYQ,MAAZ,EAAoB,GAAGL,GAAG,CAACD,MAA3B,CAAP;AACD;;AAhCc","sourcesContent":["/*\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/rpc.ts\n */\nimport { Caller, Tunnel, TunnelOptions } from './tunnel';\n\nexport type MethodType = (...params: any[]) => any;\n\ninterface MethodCallType {\n  method: string;\n  params: any[];\n}\n\nexport class Rpc {\n  private tunnel: Tunnel<MethodCallType>;\n  private methods: Map<string, MethodType>;\n\n  constructor(options: TunnelOptions) {\n    options.messageHandler = this.messageHandler.bind(this);\n\n    this.tunnel = new Tunnel(options);\n    this.methods = new Map();\n  }\n\n  call<RESULT = any>(method: string, ...params: any[]) {\n    const msg = {\n      method,\n      params\n    };\n\n    return this.tunnel.send<RESULT>(msg);\n  }\n\n  register(name: string, method: MethodType) {\n    this.methods.set(name, method);\n  }\n\n  private messageHandler(msg: MethodCallType, caller: Caller) {\n    const method = this.methods.get(msg.method);\n\n    if (method === undefined) {\n      throw new Error('Unregistered method call: ' + msg.method);\n    }\n\n    return method.call(caller, ...msg.params);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}