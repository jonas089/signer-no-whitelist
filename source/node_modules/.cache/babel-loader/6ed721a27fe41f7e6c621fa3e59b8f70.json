{"ast":null,"code":"var _jsxFileName = \"/home/chef/Desktop/signer/src/popup/components/Tooltipped/TableRow.tsx\";\nimport React from 'react';\nimport { Tooltip, TableRow, TableCell } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport { isCSPRValueByKey, parseRow } from '../../container/SigningContainer';\nimport { TooltipStyles, TooltippedListItem, BlankTooltipContent } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TooltippedTableRow = props => {\n  // If the row displays Motes use the CSPR specific tooltip styling\n  const isMotesValue = isCSPRValueByKey(props.data.key);\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    title: props.data.tooltipContent,\n    placement: \"top\",\n    classes: {\n      tooltip: isMotesValue ? props.classes.csprToolTip : props.classes.tooltip\n    },\n    children: /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: props.data.key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children:\n        /**\n         * Checks if the string represents a list so it can be displayed properly\n         */\n        Array.isArray(props.data.value) ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            listStyleType: 'none'\n          },\n          children: props.data.value.map(item => {\n            const listItemData = {\n              key: props.data.key,\n              value: item,\n              tooltipContent: BlankTooltipContent\n            }; // Utilises the parseRow method to properly parse the inner value and then display it\n\n            return /*#__PURE__*/_jsxDEV(TooltippedListItem, {\n              data: parseRow(listItemData)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 26\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this) : props.data.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TooltippedTableRow;\nexport default withStyles(TooltipStyles)(TooltippedTableRow);\n\nvar _c;\n\n$RefreshReg$(_c, \"TooltippedTableRow\");","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/components/Tooltipped/TableRow.tsx"],"names":["React","Tooltip","TableRow","TableCell","withStyles","isCSPRValueByKey","parseRow","TooltipStyles","TooltippedListItem","BlankTooltipContent","TooltippedTableRow","props","isMotesValue","data","key","tooltipContent","tooltip","classes","csprToolTip","fontWeight","Array","isArray","value","listStyleType","map","item","listItemData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,SAA5B,QAA6C,mBAA7C;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,kCAA3C;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,mBAA5C,QAAuE,GAAvE;;;AAOA,MAAMC,kBAAkB,GAAIC,KAAD,IAAoC;AAC7D;AACA,QAAMC,YAAY,GAAGP,gBAAgB,CAACM,KAAK,CAACE,IAAN,CAAWC,GAAZ,CAArC;AAEA,sBACE,QAAC,OAAD;AACE,IAAA,KAAK,EAAEH,KAAK,CAACE,IAAN,CAAWE,cADpB;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAEJ,YAAY,GACjBD,KAAK,CAACM,OAAN,CAAcC,WADG,GAEjBP,KAAK,CAACM,OAAN,CAAcD;AAHX,KAHX;AAAA,2BASE,QAAC,QAAD;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAAEG,UAAAA,UAAU,EAAE;AAAd,SAAlB;AAAA,kBAA2CR,KAAK,CAACE,IAAN,CAAWC;AAAtD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,KAAK,EAAC,OAAjB;AAAA;AAEI;AACZ;AACA;AACYM,QAAAA,KAAK,CAACC,OAAN,CAAcV,KAAK,CAACE,IAAN,CAAWS,KAAzB,iBACE;AAAI,UAAA,KAAK,EAAE;AAAEC,YAAAA,aAAa,EAAE;AAAjB,WAAX;AAAA,oBACGZ,KAAK,CAACE,IAAN,CAAWS,KAAX,CAAiBE,GAAjB,CAAsBC,IAAD,IAAkB;AACtC,kBAAMC,YAA4B,GAAG;AACnCZ,cAAAA,GAAG,EAAEH,KAAK,CAACE,IAAN,CAAWC,GADmB;AAEnCQ,cAAAA,KAAK,EAAEG,IAF4B;AAGnCV,cAAAA,cAAc,EAAEN;AAHmB,aAArC,CADsC,CAMtC;;AACA,gCAAO,QAAC,kBAAD;AAAoB,cAAA,IAAI,EAAEH,QAAQ,CAACoB,YAAD;AAAlC;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WARA;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,GAaEf,KAAK,CAACE,IAAN,CAAWS;AAlBjB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CAzCD;;KAAMZ,kB;AA2CN,eAAeN,UAAU,CAACG,aAAD,CAAV,CAA0BG,kBAA1B,CAAf","sourcesContent":["import React from 'react';\nimport { Tooltip, TableRow, TableCell } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport { SigningDataRow } from '../../../shared';\nimport { isCSPRValueByKey, parseRow } from '../../container/SigningContainer';\nimport { TooltipStyles, TooltippedListItem, BlankTooltipContent } from '.';\n\ninterface TooltippedTableRowProps {\n  data: SigningDataRow;\n  classes: Record<keyof ReturnType<typeof TooltipStyles>, string>;\n}\n\nconst TooltippedTableRow = (props: TooltippedTableRowProps) => {\n  // If the row displays Motes use the CSPR specific tooltip styling\n  const isMotesValue = isCSPRValueByKey(props.data.key);\n\n  return (\n    <Tooltip\n      title={props.data.tooltipContent}\n      placement=\"top\"\n      classes={{\n        tooltip: isMotesValue\n          ? props.classes.csprToolTip\n          : props.classes.tooltip\n      }}\n    >\n      <TableRow>\n        <TableCell style={{ fontWeight: 'bold' }}>{props.data.key}</TableCell>\n        <TableCell align=\"right\">\n          {\n            /**\n             * Checks if the string represents a list so it can be displayed properly\n             */\n            Array.isArray(props.data.value) ? (\n              <ul style={{ listStyleType: 'none' }}>\n                {props.data.value.map((item: string) => {\n                  const listItemData: SigningDataRow = {\n                    key: props.data.key,\n                    value: item,\n                    tooltipContent: BlankTooltipContent\n                  };\n                  // Utilises the parseRow method to properly parse the inner value and then display it\n                  return <TooltippedListItem data={parseRow(listItemData)} />;\n                })}\n              </ul>\n            ) : (\n              props.data.value\n            )\n          }\n        </TableCell>\n      </TableRow>\n    </Tooltip>\n  );\n};\n\nexport default withStyles(TooltipStyles)(TooltippedTableRow);\n"]},"metadata":{},"sourceType":"module"}