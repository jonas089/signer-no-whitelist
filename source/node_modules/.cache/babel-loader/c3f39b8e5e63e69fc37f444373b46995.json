{"ast":null,"code":"import _initializerDefineProperty from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _class3, _class5;\n\nimport { FieldState } from 'formstate';\nimport { fieldSubmittable, valueRequired, isAlgorithm, humanReadable, minNameLength, uniqueAlias } from '../../lib/FormValidator';\nimport { action, computed, observable } from 'mobx';\nimport { encodeBase64 } from 'tweetnacl-util';\nimport { decodeBase16, Keys } from 'casper-js-sdk';\nimport ASN1 from '@lapo/asn1js';\nimport Base64 from '@lapo/asn1js/base64';\nimport Hex from '@lapo/asn1js/hex';\nexport let ImportAccountFormData = (_class = class ImportAccountFormData {\n  parseAlgorithm(val) {\n    let decoded;\n\n    try {\n      const der = this.reHex.test(val) ? Hex.decode(val) : Base64.unarmor(val);\n      decoded = ASN1.decode(der); // Get the algorithm\n\n      try {\n        let ed25519 = decoded.toPrettyString().includes('curveEd25519');\n        let secp256k1 = decoded.toPrettyString().includes('secp256k1');\n\n        if (ed25519) {\n          this.algorithm.onChange('ed25519');\n          let hexKey = decoded.toPrettyString().split('\\n')[4].split('|')[1];\n          this.secretKeyBase64.onChange(encodeBase64(decodeBase16(hexKey)));\n        } else if (secp256k1) {\n          this.algorithm.onChange('secp256k1');\n          let hexKey = decoded.toPrettyString().split('\\n')[2].split('|')[1];\n          this.secretKeyBase64.onChange(encodeBase64(decodeBase16(hexKey)));\n        } else {\n          this.errors.capture(Promise.reject('Could not parse algorithm from DER encoding'));\n        }\n      } catch (err) {\n        this.errors.capture(Promise.reject(err));\n      }\n    } catch (e) {\n      this.errors.capture(Promise.reject(e));\n    }\n  }\n\n  checkFileContent(fileContent) {\n    if (!fileContent) {\n      return 'The content of imported file cannot be empty!';\n    }\n\n    if (fileContent.includes('PUBLIC KEY')) {\n      return 'Not a secret key file!';\n    }\n\n    return null;\n  }\n\n  constructor(errors) {\n    this.errors = errors;\n    this.secretKeyBase64 = new FieldState('').validators(valueRequired);\n    this.algorithm = new FieldState('').validators(valueRequired, isAlgorithm);\n    this.name = new FieldState('').validators(valueRequired, minNameLength, humanReadable);\n    this.reHex = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/;\n\n    _initializerDefineProperty(this, \"file\", _descriptor, this);\n\n    this.handleFileSelect = e => {\n      if (this.errors.lastError) {\n        this.errors.dismissLast();\n      }\n\n      if (e.target.files) {\n        this.file = e.target.files[0];\n        const reader = new FileReader();\n        reader.readAsText(this.file);\n\n        reader.onload = e => {\n          const fileContents = reader.result;\n          const errorMsg = this.checkFileContent(fileContents);\n\n          if (errorMsg === null) {\n            var _this$file;\n\n            const file = (_this$file = this.file) === null || _this$file === void 0 ? void 0 : _this$file.name.split('.');\n\n            if (file === undefined) {\n              this.errors.capture(Promise.reject(new Error('File undefined')));\n            } else {\n              // File is defined now check format by extension\n              const fileExt = file[1];\n\n              if (fileExt !== 'pem' && fileExt !== 'cer') {\n                this.errors.capture(Promise.reject(new Error(`Invalid file format: .${fileExt}. Please upload a .pem or .cer file.`)));\n              } else {\n                try {\n                  this.parseAlgorithm(fileContents);\n                } catch (e) {\n                  this.errors.capture(Promise.reject(new Error('Failed to parse key')));\n                }\n              }\n            }\n          } else {\n            this.errors.capture(Promise.reject(new Error(errorMsg)));\n          }\n        };\n      }\n    };\n  }\n\n  get submitDisabled() {\n    return !(fieldSubmittable(this.secretKeyBase64) && fieldSubmittable(this.name) && fieldSubmittable(this.algorithm));\n  }\n\n  resetFields() {\n    this.secretKeyBase64.reset();\n    this.algorithm.reset();\n    this.name.reset();\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"file\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"submitDisabled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"submitDisabled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"resetFields\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"resetFields\"), _class.prototype)), _class);\nexport let CreateAccountFormData = (_class3 = class CreateAccountFormData extends ImportAccountFormData {\n  constructor(errors) {\n    super(errors);\n    this.publicKey = new FieldState('').validators(valueRequired);\n    this.algorithm.onUpdate(fieldState => {\n      switch (fieldState.value) {\n        case 'ed25519':\n          {\n            let ed25519KP = Keys.Ed25519.new();\n            this.publicKey.onChange(ed25519KP.publicKey.toHex());\n            this.secretKeyBase64.onChange(encodeBase64(ed25519KP.privateKey));\n            break;\n          }\n\n        case 'secp256k1':\n          {\n            let secp256k1KP = Keys.Secp256K1.new();\n            this.publicKey.onChange(secp256k1KP.publicKey.toHex());\n            this.secretKeyBase64.onChange(encodeBase64(secp256k1KP.privateKey));\n            break;\n          }\n\n        default:\n          throw new Error('Invalid algorithm');\n      }\n    });\n  }\n\n  get submitDisabled() {\n    return !(fieldSubmittable(this.secretKeyBase64) && fieldSubmittable(this.name) && fieldSubmittable(this.publicKey));\n  }\n\n  resetFields() {\n    super.resetFields();\n    this.publicKey.reset();\n  }\n\n}, (_applyDecoratedDescriptor(_class3.prototype, \"submitDisabled\", [computed], Object.getOwnPropertyDescriptor(_class3.prototype, \"submitDisabled\"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, \"resetFields\", [action], Object.getOwnPropertyDescriptor(_class3.prototype, \"resetFields\"), _class3.prototype)), _class3);\nexport let RenameAccountFormData = (_class5 = class RenameAccountFormData {\n  constructor(accounts) {\n    this.accounts = [];\n    this.name = new FieldState('').validators(valueRequired, minNameLength, humanReadable, val => uniqueAlias(val, this.accounts));\n    this.accounts = accounts;\n  }\n\n  get submitDisabled() {\n    return !fieldSubmittable(this.name);\n  }\n\n  resetFields() {\n    this.name.reset();\n  }\n\n}, (_applyDecoratedDescriptor(_class5.prototype, \"submitDisabled\", [computed], Object.getOwnPropertyDescriptor(_class5.prototype, \"submitDisabled\"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, \"resetFields\", [action], Object.getOwnPropertyDescriptor(_class5.prototype, \"resetFields\"), _class5.prototype)), _class5);","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/container/ImportAccountContainer.ts"],"names":["FieldState","fieldSubmittable","valueRequired","isAlgorithm","humanReadable","minNameLength","uniqueAlias","action","computed","observable","encodeBase64","decodeBase16","Keys","ASN1","Base64","Hex","ImportAccountFormData","parseAlgorithm","val","decoded","der","reHex","test","decode","unarmor","ed25519","toPrettyString","includes","secp256k1","algorithm","onChange","hexKey","split","secretKeyBase64","errors","capture","Promise","reject","err","e","checkFileContent","fileContent","constructor","validators","name","handleFileSelect","lastError","dismissLast","target","files","file","reader","FileReader","readAsText","onload","fileContents","result","errorMsg","undefined","Error","fileExt","submitDisabled","resetFields","reset","CreateAccountFormData","publicKey","onUpdate","fieldState","value","ed25519KP","Ed25519","new","toHex","privateKey","secp256k1KP","Secp256K1","RenameAccountFormData","accounts"],"mappings":"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","sourcesContent":["import { FieldState } from 'formstate';\nimport {\n  fieldSubmittable,\n  valueRequired,\n  isAlgorithm,\n  humanReadable,\n  minNameLength,\n  uniqueAlias\n} from '../../lib/FormValidator';\nimport { action, computed, observable } from 'mobx';\nimport { encodeBase64 } from 'tweetnacl-util';\nimport ErrorContainer from './ErrorContainer';\nimport { decodeBase16, Keys } from 'casper-js-sdk';\nimport ASN1 from '@lapo/asn1js';\nimport Base64 from '@lapo/asn1js/base64';\nimport Hex from '@lapo/asn1js/hex';\n\nexport interface SubmittableFormData {\n  submitDisabled: boolean;\n  resetFields: () => void;\n}\n\nexport class ImportAccountFormData implements SubmittableFormData {\n  secretKeyBase64: FieldState<string> = new FieldState<string>('').validators(\n    valueRequired\n  );\n  algorithm: FieldState<string> = new FieldState<string>('').validators(\n    valueRequired,\n    isAlgorithm\n  );\n  name: FieldState<string> = new FieldState<string>('').validators(\n    valueRequired,\n    minNameLength,\n    humanReadable\n  );\n  reHex = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/;\n  @observable file: File | null = null;\n\n  private parseAlgorithm(val: any) {\n    let decoded;\n    try {\n      const der: Uint8Array = this.reHex.test(val)\n        ? Hex.decode(val)\n        : Base64.unarmor(val);\n      decoded = ASN1.decode(der);\n\n      // Get the algorithm\n      try {\n        let ed25519: boolean = decoded\n          .toPrettyString()\n          .includes('curveEd25519');\n        let secp256k1: boolean = decoded.toPrettyString().includes('secp256k1');\n        if (ed25519) {\n          this.algorithm.onChange('ed25519');\n          let hexKey = decoded.toPrettyString().split('\\n')[4].split('|')[1];\n          this.secretKeyBase64.onChange(encodeBase64(decodeBase16(hexKey)));\n        } else if (secp256k1) {\n          this.algorithm.onChange('secp256k1');\n          let hexKey = decoded.toPrettyString().split('\\n')[2].split('|')[1];\n          this.secretKeyBase64.onChange(encodeBase64(decodeBase16(hexKey)));\n        } else {\n          this.errors.capture(\n            Promise.reject('Could not parse algorithm from DER encoding')\n          );\n        }\n      } catch (err) {\n        this.errors.capture(Promise.reject(err));\n      }\n    } catch (e) {\n      this.errors.capture(Promise.reject(e));\n    }\n  }\n\n  private checkFileContent(fileContent: string) {\n    if (!fileContent) {\n      return 'The content of imported file cannot be empty!';\n    }\n    if (fileContent.includes('PUBLIC KEY')) {\n      return 'Not a secret key file!';\n    }\n    return null;\n  }\n\n  constructor(private errors: ErrorContainer) {}\n\n  handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.errors.lastError) {\n      this.errors.dismissLast();\n    }\n    if (e.target.files) {\n      this.file = e.target.files[0];\n      const reader = new FileReader();\n      reader.readAsText(this.file);\n      reader.onload = e => {\n        const fileContents = reader.result as string;\n        const errorMsg = this.checkFileContent(fileContents);\n        if (errorMsg === null) {\n          const file = this.file?.name!.split('.');\n          if (file === undefined) {\n            this.errors.capture(Promise.reject(new Error('File undefined')));\n          } else {\n            // File is defined now check format by extension\n            const fileExt = file[1];\n            if (fileExt !== 'pem' && fileExt !== 'cer') {\n              this.errors.capture(\n                Promise.reject(\n                  new Error(\n                    `Invalid file format: .${fileExt}. Please upload a .pem or .cer file.`\n                  )\n                )\n              );\n            } else {\n              try {\n                this.parseAlgorithm(fileContents);\n              } catch (e) {\n                this.errors.capture(\n                  Promise.reject(new Error('Failed to parse key'))\n                );\n              }\n            }\n          }\n        } else {\n          this.errors.capture(Promise.reject(new Error(errorMsg)));\n        }\n      };\n    }\n  };\n\n  @computed\n  get submitDisabled(): boolean {\n    return !(\n      fieldSubmittable(this.secretKeyBase64) &&\n      fieldSubmittable(this.name) &&\n      fieldSubmittable(this.algorithm)\n    );\n  }\n\n  @action\n  resetFields() {\n    this.secretKeyBase64.reset();\n    this.algorithm.reset();\n    this.name.reset();\n  }\n}\n\nexport class CreateAccountFormData extends ImportAccountFormData {\n  publicKey: FieldState<string> = new FieldState<string>('').validators(\n    valueRequired\n  );\n\n  constructor(errors: ErrorContainer) {\n    super(errors);\n    this.algorithm.onUpdate(fieldState => {\n      switch (fieldState.value) {\n        case 'ed25519': {\n          let ed25519KP = Keys.Ed25519.new();\n          this.publicKey.onChange(ed25519KP.publicKey.toHex());\n          this.secretKeyBase64.onChange(encodeBase64(ed25519KP.privateKey));\n          break;\n        }\n        case 'secp256k1': {\n          let secp256k1KP = Keys.Secp256K1.new();\n          this.publicKey.onChange(secp256k1KP.publicKey.toHex());\n          this.secretKeyBase64.onChange(encodeBase64(secp256k1KP.privateKey));\n          break;\n        }\n        default:\n          throw new Error('Invalid algorithm');\n      }\n    });\n  }\n\n  @computed\n  get submitDisabled(): boolean {\n    return !(\n      fieldSubmittable(this.secretKeyBase64) &&\n      fieldSubmittable(this.name) &&\n      fieldSubmittable(this.publicKey)\n    );\n  }\n\n  @action\n  resetFields() {\n    super.resetFields();\n    this.publicKey.reset();\n  }\n}\n\nexport class RenameAccountFormData implements SubmittableFormData {\n  private accounts: string[] = [];\n  constructor(accounts: string[]) {\n    this.accounts = accounts;\n  }\n\n  name: FieldState<string> = new FieldState<string>('').validators(\n    valueRequired,\n    minNameLength,\n    humanReadable,\n    val => uniqueAlias(val, this.accounts)\n  );\n\n  @computed\n  get submitDisabled(): boolean {\n    return !fieldSubmittable(this.name);\n  }\n\n  @action\n  resetFields() {\n    this.name.reset();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}