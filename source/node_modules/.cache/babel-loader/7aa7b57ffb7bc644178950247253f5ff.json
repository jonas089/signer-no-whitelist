{"ast":null,"code":"import _regeneratorRuntime from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";/**\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/tunnel.ts\n */export var Tunnel=/*#__PURE__*/function(){function Tunnel(options){_classCallCheck(this,Tunnel);this.source=void 0;this.destination=void 0;this.postMessage=void 0;this.messageHandler=void 0;this.logMessages=void 0;this.source=options.source;this.destination=options.destination;this.postMessage=options.postMessage;this.messageHandler=options.messageHandler;this.logMessages=options.logMessages;if(options.addListener===undefined&&options.postMessage===undefined){throw new Error('Either addListener or postMessage must be present.');}else if(options.addListener!==undefined){if(options.messageHandler===undefined){throw new Error('MessageHandler must be specified if addListener present.');}options.addListener(this.onMessage.bind(this));}}_createClass(Tunnel,[{key:\"send\",value:function(){var _send=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(msg){var request,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:request={destination:this.destination,payload:msg,source:this.source,type:'casperlabs-plugin'};if(!(this.postMessage===undefined)){_context.next=3;break;}throw new Error('PostMessage was not specified.');case 3:if(this.logMessages){// tslint:disable-next-line:max-line-length\n// tslint:disable-next-line:no-console\nconsole.warn(\"Tunnel: (\".concat(this.source,\"): Sending\"),JSON.stringify(msg,null,'  '));}_context.next=6;return this.postMessage(request);case 6:response=_context.sent;if(!(response.error!==undefined)){_context.next=11;break;}throw new Error(response.error);case 11:return _context.abrupt(\"return\",response.payload);case 12:case\"end\":return _context.stop();}}},_callee,this);}));function send(_x){return _send.apply(this,arguments);}return send;}()},{key:\"onMessage\",value:function onMessage(request,sender){if(request.destination===this.source&&request.source===this.destination){var promise;try{if(this.messageHandler===undefined){throw new Error('MessageHandler was not specified.');}if(this.logMessages){// tslint:disable-next-line:max-line-length\n// tslint:disable-next-line:no-console\nconsole.warn(\"Tunnel: (\".concat(this.source,\"): Receiving\"),JSON.stringify(request.payload,null,'  '));}var _caller={id:sender.id,url:sender.url};var response=this.messageHandler(request.payload,_caller);promise=Promise.resolve(response);}catch(e){promise=Promise.reject(e);}return promise.then(function(result){return{destination:request.source,payload:result,source:request.destination,type:'casperlabs-plugin'};}).catch(function(error){return{destination:request.source,error:error.message,source:request.destination,type:'casperlabs-plugin'};});}}}]);return Tunnel;}();","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/lib/rpc/tunnel.ts"],"names":["Tunnel","options","source","destination","postMessage","messageHandler","logMessages","addListener","undefined","Error","onMessage","bind","msg","request","payload","type","console","warn","JSON","stringify","response","error","sender","promise","caller","id","url","Promise","resolve","e","reject","then","result","catch","message"],"mappings":"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","sourcesContent":["/**\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/tunnel.ts\n */\nimport { Runtime } from 'webextension-polyfill-ts';\n\nexport type CallbackType = (\n  msg: Request,\n  sender: Runtime.MessageSender\n) => Promise<Response> | void;\nexport type PostMessageType = (msg: Request) => Promise<Response>;\n\nexport type AddListenerType = (callback: CallbackType) => void;\n\nexport interface Caller {\n  url?: string;\n  id?: string;\n}\n\nexport type MessageHandlerType = (msg: any, caller: Caller) => any;\n\nexport interface Request {\n  payload: any;\n  source: string;\n  destination: string;\n  type: 'casperlabs-plugin';\n}\n\nexport interface Response<TYPE = any> {\n  destination: string;\n  error?: string;\n  payload?: TYPE;\n  source: string;\n  type: 'casperlabs-plugin';\n}\n\nexport interface TunnelOptions {\n  source: string;\n  destination: string;\n  postMessage?: PostMessageType;\n  addListener?: AddListenerType;\n  messageHandler?: MessageHandlerType;\n  logMessages?: boolean;\n}\n\nexport class Tunnel<T = any> {\n  private source: string;\n  private destination: string;\n  private postMessage?: PostMessageType;\n  private messageHandler?: MessageHandlerType;\n\n  private logMessages?: boolean;\n\n  constructor(options: TunnelOptions) {\n    this.source = options.source;\n    this.destination = options.destination;\n    this.postMessage = options.postMessage;\n    this.messageHandler = options.messageHandler;\n    this.logMessages = options.logMessages;\n\n    if (\n      options.addListener === undefined &&\n      options.postMessage === undefined\n    ) {\n      throw new Error('Either addListener or postMessage must be present.');\n    } else if (options.addListener !== undefined) {\n      if (options.messageHandler === undefined) {\n        throw new Error(\n          'MessageHandler must be specified if addListener present.'\n        );\n      }\n\n      options.addListener(this.onMessage.bind(this));\n    }\n  }\n\n  async send<RESULT>(msg: T): Promise<RESULT> {\n    const request: Request = {\n      destination: this.destination,\n      payload: msg,\n      source: this.source,\n      type: 'casperlabs-plugin'\n    };\n\n    if (this.postMessage === undefined) {\n      throw new Error('PostMessage was not specified.');\n    }\n\n    if (this.logMessages) {\n      // tslint:disable-next-line:max-line-length\n      // tslint:disable-next-line:no-console\n      console.warn(\n        `Tunnel: (${this.source}): Sending`,\n        JSON.stringify(msg, null, '  ')\n      );\n    }\n\n    const response: Response<RESULT> = await this.postMessage(request);\n\n    if (response.error !== undefined) {\n      throw new Error(response.error);\n    } else {\n      return response.payload as RESULT;\n    }\n  }\n\n  private onMessage(\n    request: Request,\n    sender: Runtime.MessageSender\n  ): Promise<Response> | void {\n    if (\n      request.destination === this.source &&\n      request.source === this.destination\n    ) {\n      let promise: Promise<any>;\n\n      try {\n        if (this.messageHandler === undefined) {\n          throw new Error('MessageHandler was not specified.');\n        }\n\n        if (this.logMessages) {\n          // tslint:disable-next-line:max-line-length\n          // tslint:disable-next-line:no-console\n          console.warn(\n            `Tunnel: (${this.source}): Receiving`,\n            JSON.stringify(request.payload, null, '  ')\n          );\n        }\n\n        const caller: Caller = {\n          id: sender.id,\n          url: sender.url\n        };\n\n        const response = this.messageHandler(request.payload, caller);\n        promise = Promise.resolve(response);\n      } catch (e) {\n        promise = Promise.reject(e);\n      }\n\n      return promise\n        .then(result => {\n          return {\n            destination: request.source,\n            payload: result,\n            source: request.destination,\n            type: 'casperlabs-plugin'\n          } as Response;\n        })\n        .catch(error => {\n          return {\n            destination: request.source,\n            error: error.message,\n            source: request.destination,\n            type: 'casperlabs-plugin'\n          } as Response;\n        });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}