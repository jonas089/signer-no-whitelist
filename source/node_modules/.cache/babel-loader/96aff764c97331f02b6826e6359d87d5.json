{"ast":null,"code":"import _toConsumableArray from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";/*\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/rpc.ts\n */import{Tunnel}from'./tunnel';export var Rpc=/*#__PURE__*/function(){function Rpc(options){_classCallCheck(this,Rpc);this.tunnel=void 0;this.methods=void 0;options.messageHandler=this.messageHandler.bind(this);this.tunnel=new Tunnel(options);this.methods=new Map();}_createClass(Rpc,[{key:\"call\",value:function call(method){for(var _len=arguments.length,params=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){params[_key-1]=arguments[_key];}var msg={method:method,params:params};return this.tunnel.send(msg);}},{key:\"register\",value:function register(name,method){this.methods.set(name,method);}},{key:\"messageHandler\",value:function messageHandler(msg,caller){var method=this.methods.get(msg.method);if(method===undefined){throw new Error('Unregistered method call: '+msg.method);}return method.call.apply(method,[caller].concat(_toConsumableArray(msg.params)));}}]);return Rpc;}();","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/lib/rpc/rpc.ts"],"names":["Tunnel","Rpc","options","tunnel","methods","messageHandler","bind","Map","method","params","msg","send","name","set","caller","get","undefined","Error","call"],"mappings":"sbAAA;AACA;AACA,GACA,OAAiBA,MAAjB,KAA8C,UAA9C,CASA,UAAaC,CAAAA,GAAb,yBAIE,aAAYC,OAAZ,CAAoC,gCAH5BC,MAG4B,aAF5BC,OAE4B,QAClCF,OAAO,CAACG,cAAR,CAAyB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAzB,CAEA,KAAKH,MAAL,CAAc,GAAIH,CAAAA,MAAJ,CAAWE,OAAX,CAAd,CACA,KAAKE,OAAL,CAAe,GAAIG,CAAAA,GAAJ,EAAf,CACD,CATH,oCAWE,cAAmBC,MAAnB,CAAqD,+BAAfC,MAAe,qDAAfA,MAAe,0BACnD,GAAMC,CAAAA,GAAG,CAAG,CACVF,MAAM,CAANA,MADU,CAEVC,MAAM,CAANA,MAFU,CAAZ,CAKA,MAAO,MAAKN,MAAL,CAAYQ,IAAZ,CAAyBD,GAAzB,CAAP,CACD,CAlBH,wBAoBE,kBAASE,IAAT,CAAuBJ,MAAvB,CAA2C,CACzC,KAAKJ,OAAL,CAAaS,GAAb,CAAiBD,IAAjB,CAAuBJ,MAAvB,EACD,CAtBH,8BAwBE,wBAAuBE,GAAvB,CAA4CI,MAA5C,CAA4D,CAC1D,GAAMN,CAAAA,MAAM,CAAG,KAAKJ,OAAL,CAAaW,GAAb,CAAiBL,GAAG,CAACF,MAArB,CAAf,CAEA,GAAIA,MAAM,GAAKQ,SAAf,CAA0B,CACxB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,6BAA+BP,GAAG,CAACF,MAA7C,CAAN,CACD,CAED,MAAOA,CAAAA,MAAM,CAACU,IAAP,OAAAV,MAAM,EAAMM,MAAN,4BAAiBJ,GAAG,CAACD,MAArB,GAAb,CACD,CAhCH","sourcesContent":["/*\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/rpc.ts\n */\nimport { Caller, Tunnel, TunnelOptions } from './tunnel';\n\nexport type MethodType = (...params: any[]) => any;\n\ninterface MethodCallType {\n  method: string;\n  params: any[];\n}\n\nexport class Rpc {\n  private tunnel: Tunnel<MethodCallType>;\n  private methods: Map<string, MethodType>;\n\n  constructor(options: TunnelOptions) {\n    options.messageHandler = this.messageHandler.bind(this);\n\n    this.tunnel = new Tunnel(options);\n    this.methods = new Map();\n  }\n\n  call<RESULT = any>(method: string, ...params: any[]) {\n    const msg = {\n      method,\n      params\n    };\n\n    return this.tunnel.send<RESULT>(msg);\n  }\n\n  register(name: string, method: MethodType) {\n    this.methods.set(name, method);\n  }\n\n  private messageHandler(msg: MethodCallType, caller: Caller) {\n    const method = this.methods.get(msg.method);\n\n    if (method === undefined) {\n      throw new Error('Unregistered method call: ' + msg.method);\n    }\n\n    return method.call(caller, ...msg.params);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}