{"ast":null,"code":"// Hex JavaScript decoder\n// Copyright (c) 2008-2020 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n(typeof define != 'undefined' ? define : function (factory) {\n  'use strict';\n\n  if (typeof module == 'object') module.exports = factory();else window.hex = factory();\n})(function () {\n  \"use strict\";\n\n  var Hex = {},\n      decoder,\n      // populated on first usage\n  haveU8 = typeof Uint8Array == 'function';\n  /**\n   * Decodes an hexadecimal value.\n   * @param {string|Array|Uint8Array} a - a string representing hexadecimal data, or an array representation of its charcodes\n   */\n\n  Hex.decode = function (a) {\n    var isString = typeof a == 'string';\n    var i;\n\n    if (decoder === undefined) {\n      var hex = \"0123456789ABCDEF\",\n          ignore = \" \\f\\n\\r\\t\\xA0\\u2028\\u2029\";\n      decoder = [];\n\n      for (i = 0; i < 16; ++i) {\n        decoder[hex.charCodeAt(i)] = i;\n      }\n\n      hex = hex.toLowerCase();\n\n      for (i = 10; i < 16; ++i) {\n        decoder[hex.charCodeAt(i)] = i;\n      }\n\n      for (i = 0; i < ignore.length; ++i) {\n        decoder[ignore.charCodeAt(i)] = -1;\n      }\n    }\n\n    var out = haveU8 ? new Uint8Array(a.length >> 1) : [],\n        bits = 0,\n        char_count = 0,\n        len = 0;\n\n    for (i = 0; i < a.length; ++i) {\n      var c = isString ? a.charCodeAt(i) : a[i];\n      c = decoder[c];\n      if (c == -1) continue;\n      if (c === undefined) throw 'Illegal character at offset ' + i;\n      bits |= c;\n\n      if (++char_count >= 2) {\n        out[len++] = bits;\n        bits = 0;\n        char_count = 0;\n      } else {\n        bits <<= 4;\n      }\n    }\n\n    if (char_count) throw \"Hex encoding incomplete: 4 bits missing\";\n    if (haveU8 && out.length > len) // in case it was originally longer because of ignored characters\n      out = out.subarray(0, len);\n    return out;\n  };\n\n  return Hex;\n});","map":{"version":3,"sources":["/home/chef/Desktop/signer/node_modules/@lapo/asn1js/hex.js"],"names":["define","factory","module","exports","window","hex","Hex","decoder","haveU8","Uint8Array","decode","a","isString","i","undefined","ignore","charCodeAt","toLowerCase","length","out","bits","char_count","len","c","subarray"],"mappings":"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","sourcesContent":["// Hex JavaScript decoder\n// Copyright (c) 2008-2020 Lapo Luchini <lapo@lapo.it>\n\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n(typeof define != 'undefined' ? define : function (factory) { 'use strict';\n    if (typeof module == 'object') module.exports = factory();\n    else window.hex = factory();\n})(function () {\n\"use strict\";\n\nvar Hex = {},\n    decoder, // populated on first usage\n    haveU8 = (typeof Uint8Array == 'function');\n\n/**\n * Decodes an hexadecimal value.\n * @param {string|Array|Uint8Array} a - a string representing hexadecimal data, or an array representation of its charcodes\n */\nHex.decode = function(a) {\n    var isString = (typeof a == 'string');\n    var i;\n    if (decoder === undefined) {\n        var hex = \"0123456789ABCDEF\",\n            ignore = \" \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\n        decoder = [];\n        for (i = 0; i < 16; ++i)\n            decoder[hex.charCodeAt(i)] = i;\n        hex = hex.toLowerCase();\n        for (i = 10; i < 16; ++i)\n            decoder[hex.charCodeAt(i)] = i;\n        for (i = 0; i < ignore.length; ++i)\n            decoder[ignore.charCodeAt(i)] = -1;\n    }\n    var out = haveU8 ? new Uint8Array(a.length >> 1) : [],\n        bits = 0,\n        char_count = 0,\n        len = 0;\n    for (i = 0; i < a.length; ++i) {\n        var c = isString ? a.charCodeAt(i) : a[i];\n        c = decoder[c];\n        if (c == -1)\n            continue;\n        if (c === undefined)\n            throw 'Illegal character at offset ' + i;\n        bits |= c;\n        if (++char_count >= 2) {\n            out[len++] = bits;\n            bits = 0;\n            char_count = 0;\n        } else {\n            bits <<= 4;\n        }\n    }\n    if (char_count)\n        throw \"Hex encoding incomplete: 4 bits missing\";\n    if (haveU8 && out.length > len) // in case it was originally longer because of ignored characters\n        out = out.subarray(0, len);\n    return out;\n};\n\nreturn Hex;\n\n});\n"]},"metadata":{},"sourceType":"script"}