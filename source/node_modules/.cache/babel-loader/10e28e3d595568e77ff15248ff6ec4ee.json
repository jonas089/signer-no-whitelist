{"ast":null,"code":"/**\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/tunnel.ts\n */\nexport class Tunnel {\n  constructor(options) {\n    this.source = void 0;\n    this.destination = void 0;\n    this.postMessage = void 0;\n    this.messageHandler = void 0;\n    this.logMessages = void 0;\n    this.source = options.source;\n    this.destination = options.destination;\n    this.postMessage = options.postMessage;\n    this.messageHandler = options.messageHandler;\n    this.logMessages = options.logMessages;\n\n    if (options.addListener === undefined && options.postMessage === undefined) {\n      throw new Error('Either addListener or postMessage must be present.');\n    } else if (options.addListener !== undefined) {\n      if (options.messageHandler === undefined) {\n        throw new Error('MessageHandler must be specified if addListener present.');\n      }\n\n      options.addListener(this.onMessage.bind(this));\n    }\n  }\n\n  async send(msg) {\n    const request = {\n      destination: this.destination,\n      payload: msg,\n      source: this.source,\n      type: 'casperlabs-plugin'\n    };\n\n    if (this.postMessage === undefined) {\n      throw new Error('PostMessage was not specified.');\n    }\n\n    if (this.logMessages) {\n      // tslint:disable-next-line:max-line-length\n      // tslint:disable-next-line:no-console\n      console.warn(`Tunnel: (${this.source}): Sending`, JSON.stringify(msg, null, '  '));\n    }\n\n    const response = await this.postMessage(request);\n\n    if (response.error !== undefined) {\n      throw new Error(response.error);\n    } else {\n      return response.payload;\n    }\n  }\n\n  onMessage(request, sender) {\n    if (request.destination === this.source && request.source === this.destination) {\n      let promise;\n\n      try {\n        if (this.messageHandler === undefined) {\n          throw new Error('MessageHandler was not specified.');\n        }\n\n        if (this.logMessages) {\n          // tslint:disable-next-line:max-line-length\n          // tslint:disable-next-line:no-console\n          console.warn(`Tunnel: (${this.source}): Receiving`, JSON.stringify(request.payload, null, '  '));\n        }\n\n        const caller = {\n          id: sender.id,\n          url: sender.url\n        };\n        const response = this.messageHandler(request.payload, caller);\n        promise = Promise.resolve(response);\n      } catch (e) {\n        promise = Promise.reject(e);\n      }\n\n      return promise.then(result => {\n        return {\n          destination: request.source,\n          payload: result,\n          source: request.destination,\n          type: 'casperlabs-plugin'\n        };\n      }).catch(error => {\n        return {\n          destination: request.source,\n          error: error.message,\n          source: request.destination,\n          type: 'casperlabs-plugin'\n        };\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/lib/rpc/tunnel.ts"],"names":["Tunnel","constructor","options","source","destination","postMessage","messageHandler","logMessages","addListener","undefined","Error","onMessage","bind","send","msg","request","payload","type","console","warn","JSON","stringify","response","error","sender","promise","caller","id","url","Promise","resolve","e","reject","then","result","catch","message"],"mappings":"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","sourcesContent":["/**\n * https://github.com/ontio/ontology-dapi/blob/master/src/rpc/tunnel.ts\n */\nimport { Runtime } from 'webextension-polyfill-ts';\n\nexport type CallbackType = (\n  msg: Request,\n  sender: Runtime.MessageSender\n) => Promise<Response> | void;\nexport type PostMessageType = (msg: Request) => Promise<Response>;\n\nexport type AddListenerType = (callback: CallbackType) => void;\n\nexport interface Caller {\n  url?: string;\n  id?: string;\n}\n\nexport type MessageHandlerType = (msg: any, caller: Caller) => any;\n\nexport interface Request {\n  payload: any;\n  source: string;\n  destination: string;\n  type: 'casperlabs-plugin';\n}\n\nexport interface Response<TYPE = any> {\n  destination: string;\n  error?: string;\n  payload?: TYPE;\n  source: string;\n  type: 'casperlabs-plugin';\n}\n\nexport interface TunnelOptions {\n  source: string;\n  destination: string;\n  postMessage?: PostMessageType;\n  addListener?: AddListenerType;\n  messageHandler?: MessageHandlerType;\n  logMessages?: boolean;\n}\n\nexport class Tunnel<T = any> {\n  private source: string;\n  private destination: string;\n  private postMessage?: PostMessageType;\n  private messageHandler?: MessageHandlerType;\n\n  private logMessages?: boolean;\n\n  constructor(options: TunnelOptions) {\n    this.source = options.source;\n    this.destination = options.destination;\n    this.postMessage = options.postMessage;\n    this.messageHandler = options.messageHandler;\n    this.logMessages = options.logMessages;\n\n    if (\n      options.addListener === undefined &&\n      options.postMessage === undefined\n    ) {\n      throw new Error('Either addListener or postMessage must be present.');\n    } else if (options.addListener !== undefined) {\n      if (options.messageHandler === undefined) {\n        throw new Error(\n          'MessageHandler must be specified if addListener present.'\n        );\n      }\n\n      options.addListener(this.onMessage.bind(this));\n    }\n  }\n\n  async send<RESULT>(msg: T): Promise<RESULT> {\n    const request: Request = {\n      destination: this.destination,\n      payload: msg,\n      source: this.source,\n      type: 'casperlabs-plugin'\n    };\n\n    if (this.postMessage === undefined) {\n      throw new Error('PostMessage was not specified.');\n    }\n\n    if (this.logMessages) {\n      // tslint:disable-next-line:max-line-length\n      // tslint:disable-next-line:no-console\n      console.warn(\n        `Tunnel: (${this.source}): Sending`,\n        JSON.stringify(msg, null, '  ')\n      );\n    }\n\n    const response: Response<RESULT> = await this.postMessage(request);\n\n    if (response.error !== undefined) {\n      throw new Error(response.error);\n    } else {\n      return response.payload as RESULT;\n    }\n  }\n\n  private onMessage(\n    request: Request,\n    sender: Runtime.MessageSender\n  ): Promise<Response> | void {\n    if (\n      request.destination === this.source &&\n      request.source === this.destination\n    ) {\n      let promise: Promise<any>;\n\n      try {\n        if (this.messageHandler === undefined) {\n          throw new Error('MessageHandler was not specified.');\n        }\n\n        if (this.logMessages) {\n          // tslint:disable-next-line:max-line-length\n          // tslint:disable-next-line:no-console\n          console.warn(\n            `Tunnel: (${this.source}): Receiving`,\n            JSON.stringify(request.payload, null, '  ')\n          );\n        }\n\n        const caller: Caller = {\n          id: sender.id,\n          url: sender.url\n        };\n\n        const response = this.messageHandler(request.payload, caller);\n        promise = Promise.resolve(response);\n      } catch (e) {\n        promise = Promise.reject(e);\n      }\n\n      return promise\n        .then(result => {\n          return {\n            destination: request.source,\n            payload: result,\n            source: request.destination,\n            type: 'casperlabs-plugin'\n          } as Response;\n        })\n        .catch(error => {\n          return {\n            destination: request.source,\n            error: error.message,\n            source: request.destination,\n            type: 'casperlabs-plugin'\n          } as Response;\n        });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}