{"ast":null,"code":"/* globals define */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.owaspPasswordStrengthTest = factory();\n  }\n})(this, function () {\n  var owasp = {}; // These are configuration settings that will be used when testing password\n  // strength\n\n  owasp.configs = {\n    allowPassphrases: true,\n    maxLength: 128,\n    minLength: 10,\n    minPhraseLength: 20,\n    minOptionalTestsToPass: 4\n  }; // This method makes it more convenient to set config parameters\n\n  owasp.config = function (params) {\n    for (var prop in params) {\n      if (params.hasOwnProperty(prop) && this.configs.hasOwnProperty(prop)) {\n        this.configs[prop] = params[prop];\n      }\n    }\n  }; // This is an object containing the tests to run against all passwords.\n\n\n  owasp.tests = {\n    // An array of required tests. A password *must* pass these tests in order\n    // to be considered strong.\n    required: [// enforce a minimum length\n    function (password) {\n      if (password.length < owasp.configs.minLength) {\n        return 'The password must be at least ' + owasp.configs.minLength + ' characters long.';\n      }\n    }, // enforce a maximum length\n    function (password) {\n      if (password.length > owasp.configs.maxLength) {\n        return 'The password must be fewer than ' + owasp.configs.maxLength + ' characters.';\n      }\n    }, // forbid repeating characters\n    function (password) {\n      if (/(.)\\1{2,}/.test(password)) {\n        return 'The password may not contain sequences of three or more repeated characters.';\n      }\n    }],\n    // An array of optional tests. These tests are \"optional\" in two senses:\n    //\n    // 1. Passphrases (passwords whose length exceeds\n    //    this.configs.minPhraseLength) are not obligated to pass these tests\n    //    provided that this.configs.allowPassphrases is set to Boolean true\n    //    (which it is by default).\n    //\n    // 2. A password need only to pass this.configs.minOptionalTestsToPass\n    //    number of these optional tests in order to be considered strong.\n    optional: [// require at least one lowercase letter\n    function (password) {\n      if (!/[a-z]/.test(password)) {\n        return 'The password must contain at least one lowercase letter.';\n      }\n    }, // require at least one uppercase letter\n    function (password) {\n      if (!/[A-Z]/.test(password)) {\n        return 'The password must contain at least one uppercase letter.';\n      }\n    }, // require at least one number\n    function (password) {\n      if (!/[0-9]/.test(password)) {\n        return 'The password must contain at least one number.';\n      }\n    }, // require at least one special character\n    function (password) {\n      if (!/[^A-Za-z0-9]/.test(password)) {\n        return 'The password must contain at least one special character.';\n      }\n    }]\n  }; // This method tests password strength\n\n  owasp.test = function (password) {\n    // create an object to store the test results\n    var result = {\n      errors: [],\n      failedTests: [],\n      passedTests: [],\n      requiredTestErrors: [],\n      optionalTestErrors: [],\n      isPassphrase: false,\n      strong: true,\n      optionalTestsPassed: 0\n    }; // Always submit the password/passphrase to the required tests\n\n    var i = 0;\n    this.tests.required.forEach(function (test) {\n      var err = test(password);\n\n      if (typeof err === 'string') {\n        result.strong = false;\n        result.errors.push(err);\n        result.requiredTestErrors.push(err);\n        result.failedTests.push(i);\n      } else {\n        result.passedTests.push(i);\n      }\n\n      i++;\n    }); // If configured to allow passphrases, and if the password is of a\n    // sufficient length to consider it a passphrase, exempt it from the\n    // optional tests.\n\n    if (this.configs.allowPassphrases === true && password.length >= this.configs.minPhraseLength) {\n      result.isPassphrase = true;\n    }\n\n    if (!result.isPassphrase) {\n      var j = this.tests.required.length;\n      this.tests.optional.forEach(function (test) {\n        var err = test(password);\n\n        if (typeof err === 'string') {\n          result.errors.push(err);\n          result.optionalTestErrors.push(err);\n          result.failedTests.push(j);\n        } else {\n          result.optionalTestsPassed++;\n          result.passedTests.push(j);\n        }\n\n        j++;\n      });\n    } // If the password is not a passphrase, assert that it has passed a\n    // sufficient number of the optional tests, per the configuration\n\n\n    if (!result.isPassphrase && result.optionalTestsPassed < this.configs.minOptionalTestsToPass) {\n      result.strong = false;\n    } // return the result\n\n\n    return result;\n  };\n\n  return owasp;\n});","map":{"version":3,"sources":["/home/chef/Desktop/signer/node_modules/owasp-password-strength-test/owasp-password-strength-test.js"],"names":["root","factory","define","amd","exports","module","owaspPasswordStrengthTest","owasp","configs","allowPassphrases","maxLength","minLength","minPhraseLength","minOptionalTestsToPass","config","params","prop","hasOwnProperty","tests","required","password","length","test","optional","result","errors","failedTests","passedTests","requiredTestErrors","optionalTestErrors","isPassphrase","strong","optionalTestsPassed","i","forEach","err","push","j"],"mappings":"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","sourcesContent":["/* globals define */\n(function (root, factory) {\n  \n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.owaspPasswordStrengthTest = factory();\n  }\n\n  }(this, function () {\n\n    var owasp = {};\n\n    // These are configuration settings that will be used when testing password\n    // strength\n    owasp.configs = {\n      allowPassphrases       : true,\n      maxLength              : 128,\n      minLength              : 10,\n      minPhraseLength        : 20,\n      minOptionalTestsToPass : 4,\n    };\n\n    // This method makes it more convenient to set config parameters\n    owasp.config = function(params) {\n      for (var prop in params) {\n        if (params.hasOwnProperty(prop) && this.configs.hasOwnProperty(prop)) {\n          this.configs[prop] = params[prop];\n        }\n      }\n    };\n\n    // This is an object containing the tests to run against all passwords.\n    owasp.tests = {\n\n      // An array of required tests. A password *must* pass these tests in order\n      // to be considered strong.\n      required: [\n\n        // enforce a minimum length\n        function(password) {\n          if (password.length < owasp.configs.minLength) {\n            return 'The password must be at least ' + owasp.configs.minLength + ' characters long.';\n          }\n        },\n\n        // enforce a maximum length\n        function(password) {\n          if (password.length > owasp.configs.maxLength) {\n            return 'The password must be fewer than ' + owasp.configs.maxLength + ' characters.';\n          }\n        },\n\n        // forbid repeating characters\n        function(password) {\n          if (/(.)\\1{2,}/.test(password)) {\n            return 'The password may not contain sequences of three or more repeated characters.';\n          }\n        },\n\n      ],\n\n      // An array of optional tests. These tests are \"optional\" in two senses:\n      //\n      // 1. Passphrases (passwords whose length exceeds\n      //    this.configs.minPhraseLength) are not obligated to pass these tests\n      //    provided that this.configs.allowPassphrases is set to Boolean true\n      //    (which it is by default).\n      //\n      // 2. A password need only to pass this.configs.minOptionalTestsToPass\n      //    number of these optional tests in order to be considered strong.\n      optional: [\n\n        // require at least one lowercase letter\n        function(password) {\n          if (!/[a-z]/.test(password)) {\n            return 'The password must contain at least one lowercase letter.';\n          }\n        },\n\n        // require at least one uppercase letter\n        function(password) {\n          if (!/[A-Z]/.test(password)) {\n            return 'The password must contain at least one uppercase letter.';\n          }\n        },\n\n        // require at least one number\n        function(password) {\n          if (!/[0-9]/.test(password)) {\n            return 'The password must contain at least one number.';\n          }\n        },\n\n        // require at least one special character\n        function(password) {\n          if (!/[^A-Za-z0-9]/.test(password)) {\n            return 'The password must contain at least one special character.';\n          }\n        },\n\n      ],\n    };\n\n    // This method tests password strength\n    owasp.test = function(password) {\n\n      // create an object to store the test results\n      var result = {\n        errors              : [],\n        failedTests         : [],\n        passedTests         : [],\n        requiredTestErrors  : [],\n        optionalTestErrors  : [],\n        isPassphrase        : false,\n        strong              : true,\n        optionalTestsPassed : 0,\n      };\n\n      // Always submit the password/passphrase to the required tests\n      var i = 0;\n      this.tests.required.forEach(function(test) {\n        var err = test(password);\n        if (typeof err === 'string') {\n          result.strong = false;\n          result.errors.push(err);\n          result.requiredTestErrors.push(err);\n          result.failedTests.push(i);\n        } else {\n          result.passedTests.push(i);\n        }\n        i++;\n      });\n\n      // If configured to allow passphrases, and if the password is of a\n      // sufficient length to consider it a passphrase, exempt it from the\n      // optional tests.\n      if (\n        this.configs.allowPassphrases === true &&\n        password.length >= this.configs.minPhraseLength\n      ) {\n        result.isPassphrase = true;\n      }\n\n      if (!result.isPassphrase) {\n        var j = this.tests.required.length;\n        this.tests.optional.forEach(function(test) {\n          var err = test(password);\n          if (typeof err === 'string') {\n            result.errors.push(err);\n            result.optionalTestErrors.push(err);\n            result.failedTests.push(j);\n          } else {\n            result.optionalTestsPassed++;\n            result.passedTests.push(j);\n          }\n          j++;\n        });\n      }\n\n      // If the password is not a passphrase, assert that it has passed a\n      // sufficient number of the optional tests, per the configuration\n      if (\n        !result.isPassphrase &&\n        result.optionalTestsPassed < this.configs.minOptionalTestsToPass\n      ) {\n        result.strong = false;\n      }\n\n      // return the result\n      return result;\n    };\n\n    return owasp;\n  }\n));\n"]},"metadata":{},"sourceType":"script"}