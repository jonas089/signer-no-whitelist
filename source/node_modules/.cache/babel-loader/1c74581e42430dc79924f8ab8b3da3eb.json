{"ast":null,"code":"import _applyDecoratedDescriptor from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class;\n\nimport { computed } from 'mobx';\nimport { isNumberish, isURefString, motesToCSPR, numberWithSpaces, truncateString } from '../../shared';\nlet SigningContainer = (_class = class SigningContainer {\n  constructor(backgroundManager, appState) {\n    this.backgroundManager = backgroundManager;\n    this.appState = appState;\n  }\n\n  get deployToSign() {\n    if (this.appState.unsignedDeploys.length > 0) {\n      return this.appState.unsignedDeploys[0];\n    }\n\n    return null;\n  }\n\n  get messageToSign() {\n    if (this.appState.unsignedMessages.length > 0) {\n      return this.appState.unsignedMessages[0];\n    }\n\n    return null;\n  }\n\n  async parseDeployData(deployId) {\n    return await this.backgroundManager.parseDeployData(deployId);\n  }\n\n  async signDeploy(deployId) {\n    await this.backgroundManager.signDeploy(deployId);\n  }\n\n  async cancel(deployId) {\n    await this.backgroundManager.rejectSignDeploy(deployId);\n  }\n\n  async approveSigningMessage(messageId) {\n    await this.backgroundManager.approveSigningMessage(messageId);\n  }\n\n  async cancelSigningMessage(messageId) {\n    await this.backgroundManager.cancelSigningMessage(messageId);\n  }\n\n}, (_applyDecoratedDescriptor(_class.prototype, \"deployToSign\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"deployToSign\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"messageToSign\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"messageToSign\"), _class.prototype)), _class);\nexport const truncationLengthCutoff = 13;\nexport const isLongValue = value => value.length > truncationLengthCutoff;\nexport const isCSPRValueByKey = key => ['Amount', 'Payment', 'Transaction Fee'].includes(key);\nexport const shouldNotTruncate = key => ['Timestamp', 'Chain Name'].includes(key);\nexport const parseRow = row => {\n  // Special case for items that should not be truncated for readability e.g. Timestamp\n  if (shouldNotTruncate(row.key)) {\n    return row;\n  } // The value is a list e.g. a CLList or CLTuple\n\n\n  if (Array.isArray(row.value)) {\n    return row;\n  } // The value is a stringified number e.g. an amount in motes\n\n\n  if (isNumberish(row.value)) {\n    // If the number represents Motes then display the CSPR value in the tooltip\n    if (isCSPRValueByKey(row.key)) {\n      row.tooltipContent = `${motesToCSPR(row.value)} CSPR`;\n    } // If the number was truncated show it fully in the tooltip\n\n\n    if (isLongValue(row.value)) {\n      row.tooltipContent = row.value;\n    } // If the number is particularly long then truncate it\n\n\n    row.value = isLongValue(row.value) ? truncateString(row.value, 6, 6) : numberWithSpaces(row.value);\n    return row;\n  } // The value is formatted string URef\n\n\n  if (isURefString(row.value)) {\n    // The main value will be truncated so display the full string in the tooltip\n    row.tooltipContent = row.value; // Due to the standard prefix and suffix we use longer chunks to show more of the unique data\n\n    row.value = truncateString(row.value, 9, 9);\n    return row;\n  } // The value is a long string e.g. a key or hash\n\n\n  if (isLongValue(row.value)) {\n    // The main value will be truncated so display the full string in the tooltip\n    row.tooltipContent = row.value;\n    row.value = truncateString(row.value, 6, 6);\n    return row;\n  }\n\n  return row;\n};\nexport default SigningContainer;","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/container/SigningContainer.ts"],"names":["computed","isNumberish","isURefString","motesToCSPR","numberWithSpaces","truncateString","SigningContainer","constructor","backgroundManager","appState","deployToSign","unsignedDeploys","length","messageToSign","unsignedMessages","parseDeployData","deployId","signDeploy","cancel","rejectSignDeploy","approveSigningMessage","messageId","cancelSigningMessage","truncationLengthCutoff","isLongValue","value","isCSPRValueByKey","key","includes","shouldNotTruncate","parseRow","row","Array","isArray","tooltipContent"],"mappings":"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","sourcesContent":["import { BackgroundManager } from '../BackgroundManager';\nimport { AppState } from '../../lib/MemStore';\nimport { computed } from 'mobx';\nimport {\n  isNumberish,\n  isURefString,\n  motesToCSPR,\n  numberWithSpaces,\n  SigningDataRow,\n  truncateString\n} from '../../shared';\n\nclass SigningContainer {\n  constructor(\n    private backgroundManager: BackgroundManager,\n    private appState: AppState\n  ) {}\n\n  @computed\n  get deployToSign() {\n    if (this.appState.unsignedDeploys.length > 0) {\n      return this.appState.unsignedDeploys[0];\n    }\n    return null;\n  }\n\n  @computed\n  get messageToSign() {\n    if (this.appState.unsignedMessages.length > 0) {\n      return this.appState.unsignedMessages[0];\n    }\n    return null;\n  }\n\n  async parseDeployData(deployId: number) {\n    return await this.backgroundManager.parseDeployData(deployId);\n  }\n\n  async signDeploy(deployId: number) {\n    await this.backgroundManager.signDeploy(deployId);\n  }\n\n  async cancel(deployId: number) {\n    await this.backgroundManager.rejectSignDeploy(deployId);\n  }\n\n  async approveSigningMessage(messageId: number) {\n    await this.backgroundManager.approveSigningMessage(messageId);\n  }\n\n  async cancelSigningMessage(messageId: number) {\n    await this.backgroundManager.cancelSigningMessage(messageId);\n  }\n}\n\nexport const truncationLengthCutoff = 13;\nexport const isLongValue = (value: string) =>\n  value.length > truncationLengthCutoff;\nexport const isCSPRValueByKey = (key: string) =>\n  ['Amount', 'Payment', 'Transaction Fee'].includes(key);\nexport const shouldNotTruncate = (key: string) =>\n  ['Timestamp', 'Chain Name'].includes(key);\n\nexport const parseRow = (row: SigningDataRow): SigningDataRow => {\n  // Special case for items that should not be truncated for readability e.g. Timestamp\n  if (shouldNotTruncate(row.key)) {\n    return row;\n  }\n  // The value is a list e.g. a CLList or CLTuple\n  if (Array.isArray(row.value)) {\n    return row;\n  }\n\n  // The value is a stringified number e.g. an amount in motes\n  if (isNumberish(row.value)) {\n    // If the number represents Motes then display the CSPR value in the tooltip\n    if (isCSPRValueByKey(row.key)) {\n      row.tooltipContent = `${motesToCSPR(row.value)} CSPR`;\n    }\n    // If the number was truncated show it fully in the tooltip\n    if (isLongValue(row.value)) {\n      row.tooltipContent = row.value;\n    }\n\n    // If the number is particularly long then truncate it\n    row.value = isLongValue(row.value)\n      ? truncateString(row.value, 6, 6)\n      : numberWithSpaces(row.value);\n\n    return row;\n  }\n\n  // The value is formatted string URef\n  if (isURefString(row.value)) {\n    // The main value will be truncated so display the full string in the tooltip\n    row.tooltipContent = row.value;\n    // Due to the standard prefix and suffix we use longer chunks to show more of the unique data\n    row.value = truncateString(row.value, 9, 9);\n\n    return row;\n  }\n\n  // The value is a long string e.g. a key or hash\n  if (isLongValue(row.value)) {\n    // The main value will be truncated so display the full string in the tooltip\n    row.tooltipContent = row.value;\n    row.value = truncateString(row.value, 6, 6);\n\n    return row;\n  }\n\n  return row;\n};\n\nexport default SigningContainer;\n"]},"metadata":{},"sourceType":"module"}