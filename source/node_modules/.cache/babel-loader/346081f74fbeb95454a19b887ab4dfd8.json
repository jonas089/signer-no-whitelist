{"ast":null,"code":"import _slicedToArray from\"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{decodeBase16}from'casper-js-sdk';export var isNumberish=function isNumberish(stringNumber){return!isNaN(+stringNumber);};export var isURefString=function isURefString(value){if(typeof value!=='string')return false;var _value$split=value.split('-'),_value$split2=_slicedToArray(_value$split,3),prefix=_value$split2[0],uref=_value$split2[1],suffix=_value$split2[2];if(!prefix||!uref||!suffix)return false;var urefBytes=decodeBase16(uref);return prefix==='uref'&&urefBytes.length===32&&suffix.length===3;};export var truncateString=function truncateString(longString,startChunk,endChunk){if(!longString)throw new Error('Error parsing long string.');return longString.substring(0,startChunk)+'...'+longString.substring(longString.length-endChunk);};export var numberWithSpaces=function numberWithSpaces(numberString){if(!isNumberish(numberString)){throw new Error('Unable to parse string as number');}// Adds a space in after 3 digits\nreturn numberString.replace(/\\B(?=(\\d{3})+(?!\\d))/g,' ');};export var motesToCSPR=function motesToCSPR(motes){if(!isNumberish(motes)){throw new Error('Unable to parse motes string as number');}return(+motes/1000000000).toString();};","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/shared/common.ts"],"names":["decodeBase16","isNumberish","stringNumber","isNaN","isURefString","value","split","prefix","uref","suffix","urefBytes","length","truncateString","longString","startChunk","endChunk","Error","substring","numberWithSpaces","numberString","replace","motesToCSPR","motes","toString"],"mappings":"gJAAA,OAASA,YAAT,KAA6B,eAA7B,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,YAAD,CAA0B,CACnD,MAAO,CAACC,KAAK,CAAC,CAACD,YAAF,CAAb,CACD,CAFM,CAIP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAmB,CAC7C,GAAI,MAAOA,CAAAA,KAAP,GAAiB,QAArB,CAA+B,MAAO,MAAP,CAE/B,iBAA+BA,KAAK,CAACC,KAAN,CAAY,GAAZ,CAA/B,8CAAOC,MAAP,kBAAeC,IAAf,kBAAqBC,MAArB,kBAEA,GAAI,CAACF,MAAD,EAAW,CAACC,IAAZ,EAAoB,CAACC,MAAzB,CAAiC,MAAO,MAAP,CAEjC,GAAMC,CAAAA,SAAS,CAAGV,YAAY,CAACQ,IAAD,CAA9B,CACA,MAAOD,CAAAA,MAAM,GAAK,MAAX,EAAqBG,SAAS,CAACC,MAAV,GAAqB,EAA1C,EAAgDF,MAAM,CAACE,MAAP,GAAkB,CAAzE,CACD,CATM,CAWP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAC5BC,UAD4B,CAE5BC,UAF4B,CAG5BC,QAH4B,CAIjB,CACX,GAAI,CAACF,UAAL,CAAiB,KAAM,IAAIG,CAAAA,KAAJ,CAAU,4BAAV,CAAN,CACjB,MACEH,CAAAA,UAAU,CAACI,SAAX,CAAqB,CAArB,CAAwBH,UAAxB,EACA,KADA,CAEAD,UAAU,CAACI,SAAX,CAAqBJ,UAAU,CAACF,MAAX,CAAoBI,QAAzC,CAHF,CAKD,CAXM,CAaP,MAAO,IAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,YAAD,CAA0B,CACxD,GAAI,CAAClB,WAAW,CAACkB,YAAD,CAAhB,CAAgC,CAC9B,KAAM,IAAIH,CAAAA,KAAJ,CAAU,kCAAV,CAAN,CACD,CACD;AACA,MAAOG,CAAAA,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAA8C,GAA9C,CAAP,CACD,CANM,CAQP,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAmB,CAC5C,GAAI,CAACrB,WAAW,CAACqB,KAAD,CAAhB,CAAyB,CACvB,KAAM,IAAIN,CAAAA,KAAJ,CAAU,wCAAV,CAAN,CACD,CACD,MAAO,CAAC,CAACM,KAAD,CAAS,UAAV,EAAsBC,QAAtB,EAAP,CACD,CALM","sourcesContent":["import { decodeBase16 } from 'casper-js-sdk';\n\nexport const isNumberish = (stringNumber: string) => {\n  return !isNaN(+stringNumber);\n};\n\nexport const isURefString = (value: string) => {\n  if (typeof value !== 'string') return false;\n\n  const [prefix, uref, suffix] = value.split('-');\n\n  if (!prefix || !uref || !suffix) return false;\n\n  const urefBytes = decodeBase16(uref);\n  return prefix === 'uref' && urefBytes.length === 32 && suffix.length === 3;\n};\n\nexport const truncateString = (\n  longString: string,\n  startChunk: number,\n  endChunk: number\n): string => {\n  if (!longString) throw new Error('Error parsing long string.');\n  return (\n    longString.substring(0, startChunk) +\n    '...' +\n    longString.substring(longString.length - endChunk)\n  );\n};\n\nexport const numberWithSpaces = (numberString: string) => {\n  if (!isNumberish(numberString)) {\n    throw new Error('Unable to parse string as number');\n  }\n  // Adds a space in after 3 digits\n  return numberString.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n};\n\nexport const motesToCSPR = (motes: string) => {\n  if (!isNumberish(motes)) {\n    throw new Error('Unable to parse motes string as number');\n  }\n  return (+motes / 1000000000).toString();\n};\n"]},"metadata":{},"sourceType":"module"}