{"ast":null,"code":"import _applyDecoratedDescriptor from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class;\n\nimport { computed } from 'mobx';\nimport { browser } from 'webextension-polyfill-ts';\nlet ConnectSignerContainer = (_class = class ConnectSignerContainer {\n  constructor(backgroundManager, appState) {\n    this.backgroundManager = backgroundManager;\n    this.appState = appState;\n  }\n\n  get connectionStatus() {\n    return this.appState.connectionStatus;\n  }\n\n  get connectionRequested() {\n    return this.appState.connectionRequested;\n  }\n\n  async connectToSite(url) {\n    await this.backgroundManager.connectToSite(url);\n    await this.resetConnectionRequest();\n  }\n\n  async disconnectFromSite(site) {\n    await this.backgroundManager.disconnectFromSite(site);\n    await this.resetConnectionRequest();\n  }\n\n  async removeSite(url) {\n    await this.backgroundManager.removeSite(url);\n    await this.resetConnectionRequest();\n  }\n\n  async resetConnectionRequest() {\n    await this.backgroundManager.resetConnectionRequest();\n  }\n\n  async cancel() {\n    await this.resetConnectionRequest();\n    await this.closeWindow();\n  }\n\n  async open() {\n    await this.openWindow();\n  }\n\n  async closeWindow() {\n    let views = await browser.extension.getViews();\n    let popup = views[1].window;\n    popup.close();\n  }\n\n  async openWindow() {\n    let views = await browser.extension.getViews();\n    let popup = views[1].window;\n    popup.open();\n  }\n\n  get connectedSites() {\n    return this.appState.connectedSites;\n  }\n\n  get currentTab() {\n    return this.appState.currentTab;\n  } // Is the current site injected with the content script?\n  // And therefore is it a valid integrated client.\n  // Based on the list of URLs from the extension manifest.json\n\n\n  async isIntegratedSite(hostname) {\n    return await this.backgroundManager.isIntegratedSite(hostname);\n  }\n\n  get integratedSite() {\n    return this.appState.isIntegratedSite;\n  }\n\n}, (_applyDecoratedDescriptor(_class.prototype, \"connectionStatus\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"connectionStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"connectionRequested\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"connectionRequested\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"connectedSites\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"connectedSites\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"currentTab\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"currentTab\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"integratedSite\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"integratedSite\"), _class.prototype)), _class);\nexport default ConnectSignerContainer;","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/container/ConnectSignerContainer.ts"],"names":["computed","browser","ConnectSignerContainer","constructor","backgroundManager","appState","connectionStatus","connectionRequested","connectToSite","url","resetConnectionRequest","disconnectFromSite","site","removeSite","cancel","closeWindow","open","openWindow","views","extension","getViews","popup","window","close","connectedSites","currentTab","isIntegratedSite","hostname","integratedSite"],"mappings":";;;;AAEA,SAASA,QAAT,QAAyB,MAAzB;AACA,SAASC,OAAT,QAAwB,0BAAxB;IAEMC,sB,aAAN,MAAMA,sBAAN,CAA6B;AAC3BC,EAAAA,WAAW,CACDC,iBADC,EAEDC,QAFC,EAGT;AAAA,SAFQD,iBAER,GAFQA,iBAER;AAAA,SADQC,QACR,GADQA,QACR;AAAE;;AAGgB,MAAhBC,gBAAgB,GAAG;AACrB,WAAO,KAAKD,QAAL,CAAcC,gBAArB;AACD;;AAGsB,MAAnBC,mBAAmB,GAAG;AACxB,WAAO,KAAKF,QAAL,CAAcE,mBAArB;AACD;;AAEkB,QAAbC,aAAa,CAACC,GAAD,EAAe;AAChC,UAAM,KAAKL,iBAAL,CAAuBI,aAAvB,CAAqCC,GAArC,CAAN;AACA,UAAM,KAAKC,sBAAL,EAAN;AACD;;AAEuB,QAAlBC,kBAAkB,CAACC,IAAD,EAAgB;AACtC,UAAM,KAAKR,iBAAL,CAAuBO,kBAAvB,CAA0CC,IAA1C,CAAN;AACA,UAAM,KAAKF,sBAAL,EAAN;AACD;;AAEe,QAAVG,UAAU,CAACJ,GAAD,EAAc;AAC5B,UAAM,KAAKL,iBAAL,CAAuBS,UAAvB,CAAkCJ,GAAlC,CAAN;AACA,UAAM,KAAKC,sBAAL,EAAN;AACD;;AAE2B,QAAtBA,sBAAsB,GAAG;AAC7B,UAAM,KAAKN,iBAAL,CAAuBM,sBAAvB,EAAN;AACD;;AAEW,QAANI,MAAM,GAAG;AACb,UAAM,KAAKJ,sBAAL,EAAN;AACA,UAAM,KAAKK,WAAL,EAAN;AACD;;AAES,QAAJC,IAAI,GAAG;AACX,UAAM,KAAKC,UAAL,EAAN;AACD;;AAEwB,QAAXF,WAAW,GAAG;AAC1B,QAAIG,KAAK,GAAG,MAAMjB,OAAO,CAACkB,SAAR,CAAkBC,QAAlB,EAAlB;AACA,QAAIC,KAAK,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASI,MAArB;AACAD,IAAAA,KAAK,CAACE,KAAN;AACD;;AAEuB,QAAVN,UAAU,GAAG;AACzB,QAAIC,KAAK,GAAG,MAAMjB,OAAO,CAACkB,SAAR,CAAkBC,QAAlB,EAAlB;AACA,QAAIC,KAAK,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASI,MAArB;AACAD,IAAAA,KAAK,CAACL,IAAN;AACD;;AAGiB,MAAdQ,cAAc,GAAG;AACnB,WAAO,KAAKnB,QAAL,CAAcmB,cAArB;AACD;;AAGa,MAAVC,UAAU,GAAG;AACf,WAAO,KAAKpB,QAAL,CAAcoB,UAArB;AACD,GAhE0B,CAkE3B;AACA;AACA;;;AACsB,QAAhBC,gBAAgB,CAACC,QAAD,EAAmB;AACvC,WAAO,MAAM,KAAKvB,iBAAL,CAAuBsB,gBAAvB,CAAwCC,QAAxC,CAAb;AACD;;AAGiB,MAAdC,cAAc,GAAG;AACnB,WAAO,KAAKvB,QAAL,CAAcqB,gBAArB;AACD;;AA5E0B,C,oEAM1B1B,Q,iKAKAA,Q,+JA6CAA,Q,sJAKAA,Q,sJAYAA,Q;AAMH,eAAeE,sBAAf","sourcesContent":["import { AppState } from '../../lib/MemStore';\nimport { BackgroundManager } from '../BackgroundManager';\nimport { computed } from 'mobx';\nimport { browser } from 'webextension-polyfill-ts';\n\nclass ConnectSignerContainer {\n  constructor(\n    private backgroundManager: BackgroundManager,\n    private appState: AppState\n  ) {}\n\n  @computed\n  get connectionStatus() {\n    return this.appState.connectionStatus;\n  }\n\n  @computed\n  get connectionRequested() {\n    return this.appState.connectionRequested;\n  }\n\n  async connectToSite(url?: string) {\n    await this.backgroundManager.connectToSite(url);\n    await this.resetConnectionRequest();\n  }\n\n  async disconnectFromSite(site?: string) {\n    await this.backgroundManager.disconnectFromSite(site);\n    await this.resetConnectionRequest();\n  }\n\n  async removeSite(url: string) {\n    await this.backgroundManager.removeSite(url);\n    await this.resetConnectionRequest();\n  }\n\n  async resetConnectionRequest() {\n    await this.backgroundManager.resetConnectionRequest();\n  }\n\n  async cancel() {\n    await this.resetConnectionRequest();\n    await this.closeWindow();\n  }\n\n  async open() {\n    await this.openWindow();\n  }\n\n  private async closeWindow() {\n    let views = await browser.extension.getViews();\n    let popup = views[1].window;\n    popup.close();\n  }\n\n  private async openWindow() {\n    let views = await browser.extension.getViews();\n    let popup = views[1].window;\n    popup.open();\n  }\n\n  @computed\n  get connectedSites() {\n    return this.appState.connectedSites;\n  }\n\n  @computed\n  get currentTab() {\n    return this.appState.currentTab;\n  }\n\n  // Is the current site injected with the content script?\n  // And therefore is it a valid integrated client.\n  // Based on the list of URLs from the extension manifest.json\n  async isIntegratedSite(hostname: string) {\n    return await this.backgroundManager.isIntegratedSite(hostname);\n  }\n\n  @computed\n  get integratedSite() {\n    return this.appState.isIntegratedSite;\n  }\n}\n\nexport default ConnectSignerContainer;\n"]},"metadata":{},"sourceType":"module"}