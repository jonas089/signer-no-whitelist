{"ast":null,"code":"var _jsxFileName = \"/home/chef/Desktop/signer/src/popup/components/Confirmation.tsx\";\nimport React from 'react';\nimport { confirmable, createConfirmation } from 'react-confirm';\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormControlLabel } from '@material-ui/core';\nimport { TextFieldWithFormState } from '../components/Forms';\nimport AccountManager from '../container/AccountManager';\nimport { ErrorContainer } from '../container/ErrorContainer';\nimport { BackgroundManager } from '../BackgroundManager';\nimport { AppState } from '../../lib/MemStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Confirmation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.errors = new ErrorContainer();\n    this.appState = new AppState();\n    this.background = new BackgroundManager(this.appState, this.errors);\n    this.accountManager = new AccountManager(this.errors, this.background, this.appState);\n\n    this.handleCheckboxChange = event => {\n      this.setState({\n        boxChecked: event.target.checked\n      });\n    };\n\n    this.state = {\n      boxChecked: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: this.props.show,\n      onClose: this.props.dismiss,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      style: {\n        margin: '-1rem -0.5rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: this.props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n        },\n        children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n            id: \"alert-dialog-description\",\n            children: this.props.confirmation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), this.props.options.requireCheckbox && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              style: {\n                alignSelf: 'flex-start'\n              },\n              checked: this.state.boxChecked,\n              onChange: this.handleCheckboxChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this),\n            label: this.props.options.checkboxText,\n            style: {\n              fontSize: '0.6rem',\n              marginRight: '-1rem',\n              marginBottom: this.props.options.requirePassword ? '0.5rem' : 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), this.props.options.requirePassword && /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(TextFieldWithFormState, {\n              autoFocus: true,\n              fieldState: this.accountManager.confirmPasswordForm.$.confirmPasswordField,\n              required: true,\n              label: 'Password',\n              type: 'password'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              this.props.cancel();\n            },\n            color: \"secondary\",\n            children: this.props.cancelLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: this.props.options.requireCheckbox && this.props.options.requirePassword ? /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: !this.state.boxChecked,\n              onClick: async () => {\n                let givenPassword = this.accountManager.confirmPasswordForm.$.confirmPasswordField.$;\n\n                try {\n                  await this.accountManager.confirmPassword(givenPassword);\n                  this.accountManager.confirmPasswordForm.$.confirmPasswordField.reset();\n                  this.errors.dismissLast();\n                  this.props.proceed();\n                } catch (e) {\n                  this.accountManager.confirmPasswordForm.$.confirmPasswordField.setError(e.message);\n                }\n              },\n              color: \"primary\",\n              children: this.props.proceedLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this) : this.props.options.requirePassword ? /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              onClick: async () => {\n                let givenPassword = this.accountManager.confirmPasswordForm.$.confirmPasswordField.$;\n\n                try {\n                  await this.accountManager.confirmPassword(givenPassword);\n                  this.accountManager.confirmPasswordForm.$.confirmPasswordField.reset();\n                  this.errors.dismissLast();\n                  this.props.proceed();\n                } catch (e) {\n                  this.accountManager.confirmPasswordForm.$.confirmPasswordField.setError(e.message);\n                }\n              },\n              color: \"primary\",\n              children: this.props.proceedLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: this.props.options.requireCheckbox ? !this.state.boxChecked : false,\n              onClick: () => {\n                this.props.proceed();\n              },\n              color: \"primary\",\n              children: this.props.proceedLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport function confirm(title, confirmation) {\n  let proceedLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';\n  let cancelLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'cancel';\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    requirePassword: false,\n    requireCheckbox: false,\n    checkboxText: '',\n    unmountAfter: 10000\n  };\n  return createConfirmation(confirmable(Confirmation), options.unmountAfter)({\n    title,\n    confirmation,\n    proceedLabel,\n    cancelLabel,\n    options\n  });\n}","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/components/Confirmation.tsx"],"names":["React","confirmable","createConfirmation","Button","Checkbox","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","FormControlLabel","TextFieldWithFormState","AccountManager","ErrorContainer","BackgroundManager","AppState","Confirmation","Component","constructor","props","errors","appState","background","accountManager","handleCheckboxChange","event","setState","boxChecked","target","checked","state","render","show","dismiss","margin","title","e","preventDefault","confirmation","options","requireCheckbox","alignSelf","checkboxText","fontSize","marginRight","marginBottom","requirePassword","confirmPasswordForm","$","confirmPasswordField","cancel","cancelLabel","givenPassword","confirmPassword","reset","dismissLast","proceed","setError","message","proceedLabel","confirm","unmountAfter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  confirmable,\n  createConfirmation,\n  ReactConfirmProps\n} from 'react-confirm';\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  FormControl,\n  FormControlLabel\n} from '@material-ui/core';\nimport { TextFieldWithFormState } from '../components/Forms';\nimport AccountManager from '../container/AccountManager';\nimport { ErrorContainer } from '../container/ErrorContainer';\nimport { BackgroundManager } from '../BackgroundManager';\nimport { AppState } from '../../lib/MemStore';\n\ninterface Props extends ReactConfirmProps {\n  proceedLabel: string;\n  cancelLabel: string;\n  title: string | React.ReactElement;\n  options: {\n    requirePassword: boolean;\n    requireCheckbox: boolean;\n    checkboxText: string;\n    unmountAfter: number;\n  };\n}\n\nclass Confirmation extends React.Component<Props, { boxChecked: boolean }> {\n  private errors = new ErrorContainer();\n  private appState = new AppState();\n  private background = new BackgroundManager(this.appState, this.errors);\n  private accountManager = new AccountManager(\n    this.errors,\n    this.background,\n    this.appState\n  );\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { boxChecked: false };\n  }\n\n  handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ boxChecked: event.target.checked });\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.show}\n        onClose={this.props.dismiss}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        style={{ margin: '-1rem -0.5rem' }}\n      >\n        <DialogTitle id=\"alert-dialog-title\">{this.props.title}</DialogTitle>\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n          }}\n        >\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              {this.props.confirmation}\n            </DialogContentText>\n            {this.props.options.requireCheckbox && (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    style={{ alignSelf: 'flex-start' }}\n                    checked={this.state.boxChecked}\n                    onChange={this.handleCheckboxChange}\n                  />\n                }\n                label={this.props.options.checkboxText}\n                style={{\n                  fontSize: '0.6rem',\n                  marginRight: '-1rem',\n                  marginBottom: this.props.options.requirePassword\n                    ? '0.5rem'\n                    : 'auto'\n                }}\n              />\n            )}\n            {this.props.options.requirePassword && (\n              <FormControl>\n                <TextFieldWithFormState\n                  autoFocus={true}\n                  fieldState={\n                    this.accountManager.confirmPasswordForm.$\n                      .confirmPasswordField\n                  }\n                  required\n                  label={'Password'}\n                  type={'password'}\n                />\n              </FormControl>\n            )}\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={() => {\n                this.props.cancel();\n              }}\n              color=\"secondary\"\n            >\n              {this.props.cancelLabel}\n            </Button>\n            <FormControl>\n              {this.props.options.requireCheckbox &&\n              this.props.options.requirePassword ? (\n                <Button\n                  type=\"submit\"\n                  disabled={!this.state.boxChecked}\n                  onClick={async () => {\n                    let givenPassword =\n                      this.accountManager.confirmPasswordForm.$\n                        .confirmPasswordField.$;\n                    try {\n                      await this.accountManager.confirmPassword(givenPassword);\n                      this.accountManager.confirmPasswordForm.$.confirmPasswordField.reset();\n                      this.errors.dismissLast();\n                      this.props.proceed();\n                    } catch (e) {\n                      this.accountManager.confirmPasswordForm.$.confirmPasswordField.setError(\n                        (e as Error).message\n                      );\n                    }\n                  }}\n                  color=\"primary\"\n                >\n                  {this.props.proceedLabel}\n                </Button>\n              ) : this.props.options.requirePassword ? (\n                <Button\n                  type=\"submit\"\n                  onClick={async () => {\n                    let givenPassword =\n                      this.accountManager.confirmPasswordForm.$\n                        .confirmPasswordField.$;\n                    try {\n                      await this.accountManager.confirmPassword(givenPassword);\n                      this.accountManager.confirmPasswordForm.$.confirmPasswordField.reset();\n                      this.errors.dismissLast();\n                      this.props.proceed();\n                    } catch (e) {\n                      this.accountManager.confirmPasswordForm.$.confirmPasswordField.setError(\n                        (e as Error).message\n                      );\n                    }\n                  }}\n                  color=\"primary\"\n                >\n                  {this.props.proceedLabel}\n                </Button>\n              ) : (\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    this.props.options.requireCheckbox\n                      ? !this.state.boxChecked\n                      : false\n                  }\n                  onClick={() => {\n                    this.props.proceed();\n                  }}\n                  color=\"primary\"\n                >\n                  {this.props.proceedLabel}\n                </Button>\n              )}\n            </FormControl>\n          </DialogActions>\n        </form>\n      </Dialog>\n    );\n  }\n}\n\nexport function confirm(\n  title: string | React.ReactElement,\n  confirmation: string | React.ReactElement,\n  proceedLabel = 'OK',\n  cancelLabel = 'cancel',\n  options: {\n    requirePassword?: boolean;\n    requireCheckbox?: boolean;\n    checkboxText?: string;\n    unmountAfter?: number;\n  } = {\n    requirePassword: false,\n    requireCheckbox: false,\n    checkboxText: '',\n    unmountAfter: 10000\n  }\n) {\n  return createConfirmation(\n    confirmable(Confirmation),\n    options.unmountAfter\n  )({\n    title,\n    confirmation,\n    proceedLabel,\n    cancelLabel,\n    options\n  });\n}\n"]},"metadata":{},"sourceType":"module"}