{"ast":null,"code":"import React from'react';import{Tooltip,TableRow,TableCell}from'@material-ui/core';import{withStyles}from'@material-ui/styles';import{isCSPRValueByKey,parseRow}from'../../container/SigningContainer';import{TooltipStyles,TooltippedListItem,BlankTooltipContent}from'.';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TooltippedTableRow=function TooltippedTableRow(props){// If the row displays Motes use the CSPR specific tooltip styling\nvar isMotesValue=isCSPRValueByKey(props.data.key);return/*#__PURE__*/_jsx(Tooltip,{title:props.data.tooltipContent,placement:\"top\",classes:{tooltip:isMotesValue?props.classes.csprToolTip:props.classes.tooltip},children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{style:{fontWeight:'bold'},children:props.data.key}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/**\n             * Checks if the string represents a list so it can be displayed properly\n             */Array.isArray(props.data.value)?/*#__PURE__*/_jsx(\"ul\",{style:{listStyleType:'none'},children:props.data.value.map(function(item){var listItemData={key:props.data.key,value:item,tooltipContent:BlankTooltipContent};// Utilises the parseRow method to properly parse the inner value and then display it\nreturn/*#__PURE__*/_jsx(TooltippedListItem,{data:parseRow(listItemData)});})}):props.data.value})]})});};export default withStyles(TooltipStyles)(TooltippedTableRow);","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/components/Tooltipped/TableRow.tsx"],"names":["React","Tooltip","TableRow","TableCell","withStyles","isCSPRValueByKey","parseRow","TooltipStyles","TooltippedListItem","BlankTooltipContent","TooltippedTableRow","props","isMotesValue","data","key","tooltipContent","tooltip","classes","csprToolTip","fontWeight","Array","isArray","value","listStyleType","map","item","listItemData"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,CAAkBC,QAAlB,CAA4BC,SAA5B,KAA6C,mBAA7C,CACA,OAASC,UAAT,KAA2B,qBAA3B,CAEA,OAASC,gBAAT,CAA2BC,QAA3B,KAA2C,kCAA3C,CACA,OAASC,aAAT,CAAwBC,kBAAxB,CAA4CC,mBAA5C,KAAuE,GAAvE,C,wFAOA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAoC,CAC7D;AACA,GAAMC,CAAAA,YAAY,CAAGP,gBAAgB,CAACM,KAAK,CAACE,IAAN,CAAWC,GAAZ,CAArC,CAEA,mBACE,KAAC,OAAD,EACE,KAAK,CAAEH,KAAK,CAACE,IAAN,CAAWE,cADpB,CAEE,SAAS,CAAC,KAFZ,CAGE,OAAO,CAAE,CACPC,OAAO,CAAEJ,YAAY,CACjBD,KAAK,CAACM,OAAN,CAAcC,WADG,CAEjBP,KAAK,CAACM,OAAN,CAAcD,OAHX,CAHX,uBASE,MAAC,QAAD,yBACE,KAAC,SAAD,EAAW,KAAK,CAAE,CAAEG,UAAU,CAAE,MAAd,CAAlB,UAA2CR,KAAK,CAACE,IAAN,CAAWC,GAAtD,EADF,cAEE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,UAEI;AACZ;AACA,eACYM,KAAK,CAACC,OAAN,CAAcV,KAAK,CAACE,IAAN,CAAWS,KAAzB,eACE,WAAI,KAAK,CAAE,CAAEC,aAAa,CAAE,MAAjB,CAAX,UACGZ,KAAK,CAACE,IAAN,CAAWS,KAAX,CAAiBE,GAAjB,CAAqB,SAACC,IAAD,CAAkB,CACtC,GAAMC,CAAAA,YAA4B,CAAG,CACnCZ,GAAG,CAAEH,KAAK,CAACE,IAAN,CAAWC,GADmB,CAEnCQ,KAAK,CAAEG,IAF4B,CAGnCV,cAAc,CAAEN,mBAHmB,CAArC,CAKA;AACA,mBAAO,KAAC,kBAAD,EAAoB,IAAI,CAAEH,QAAQ,CAACoB,YAAD,CAAlC,EAAP,CACD,CARA,CADH,EADF,CAaEf,KAAK,CAACE,IAAN,CAAWS,KAlBjB,EAFF,GATF,EADF,CAqCD,CAzCD,CA2CA,cAAelB,CAAAA,UAAU,CAACG,aAAD,CAAV,CAA0BG,kBAA1B,CAAf","sourcesContent":["import React from 'react';\nimport { Tooltip, TableRow, TableCell } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport { SigningDataRow } from '../../../shared';\nimport { isCSPRValueByKey, parseRow } from '../../container/SigningContainer';\nimport { TooltipStyles, TooltippedListItem, BlankTooltipContent } from '.';\n\ninterface TooltippedTableRowProps {\n  data: SigningDataRow;\n  classes: Record<keyof ReturnType<typeof TooltipStyles>, string>;\n}\n\nconst TooltippedTableRow = (props: TooltippedTableRowProps) => {\n  // If the row displays Motes use the CSPR specific tooltip styling\n  const isMotesValue = isCSPRValueByKey(props.data.key);\n\n  return (\n    <Tooltip\n      title={props.data.tooltipContent}\n      placement=\"top\"\n      classes={{\n        tooltip: isMotesValue\n          ? props.classes.csprToolTip\n          : props.classes.tooltip\n      }}\n    >\n      <TableRow>\n        <TableCell style={{ fontWeight: 'bold' }}>{props.data.key}</TableCell>\n        <TableCell align=\"right\">\n          {\n            /**\n             * Checks if the string represents a list so it can be displayed properly\n             */\n            Array.isArray(props.data.value) ? (\n              <ul style={{ listStyleType: 'none' }}>\n                {props.data.value.map((item: string) => {\n                  const listItemData: SigningDataRow = {\n                    key: props.data.key,\n                    value: item,\n                    tooltipContent: BlankTooltipContent\n                  };\n                  // Utilises the parseRow method to properly parse the inner value and then display it\n                  return <TooltippedListItem data={parseRow(listItemData)} />;\n                })}\n              </ul>\n            ) : (\n              props.data.value\n            )\n          }\n        </TableCell>\n      </TableRow>\n    </Tooltip>\n  );\n};\n\nexport default withStyles(TooltipStyles)(TooltippedTableRow);\n"]},"metadata":{},"sourceType":"module"}