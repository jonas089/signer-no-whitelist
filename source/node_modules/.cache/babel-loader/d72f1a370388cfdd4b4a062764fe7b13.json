{"ast":null,"code":"import { decodeBase16 } from 'casper-js-sdk';\nexport const isNumberish = stringNumber => {\n  return !isNaN(+stringNumber);\n};\nexport const isURefString = value => {\n  if (typeof value !== 'string') return false;\n  const [prefix, uref, suffix] = value.split('-');\n  if (!prefix || !uref || !suffix) return false;\n  const urefBytes = decodeBase16(uref);\n  return prefix === 'uref' && urefBytes.length === 32 && suffix.length === 3;\n};\nexport const truncateString = (longString, startChunk, endChunk) => {\n  if (!longString) throw new Error('Error parsing long string.');\n  return longString.substring(0, startChunk) + '...' + longString.substring(longString.length - endChunk);\n};\nexport const numberWithSpaces = numberString => {\n  if (!isNumberish(numberString)) {\n    throw new Error('Unable to parse string as number');\n  } // Adds a space in after 3 digits\n\n\n  return numberString.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n};\nexport const motesToCSPR = motes => {\n  if (!isNumberish(motes)) {\n    throw new Error('Unable to parse motes string as number');\n  }\n\n  return (+motes / 1000000000).toString();\n};","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/shared/common.ts"],"names":["decodeBase16","isNumberish","stringNumber","isNaN","isURefString","value","prefix","uref","suffix","split","urefBytes","length","truncateString","longString","startChunk","endChunk","Error","substring","numberWithSpaces","numberString","replace","motesToCSPR","motes","toString"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AAEA,OAAO,MAAMC,WAAW,GAAIC,YAAD,IAA0B;AACnD,SAAO,CAACC,KAAK,CAAC,CAACD,YAAF,CAAb;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAIC,KAAD,IAAmB;AAC7C,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAP;AAE/B,QAAM,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,IAAyBH,KAAK,CAACI,KAAN,CAAY,GAAZ,CAA/B;AAEA,MAAI,CAACH,MAAD,IAAW,CAACC,IAAZ,IAAoB,CAACC,MAAzB,EAAiC,OAAO,KAAP;AAEjC,QAAME,SAAS,GAAGV,YAAY,CAACO,IAAD,CAA9B;AACA,SAAOD,MAAM,KAAK,MAAX,IAAqBI,SAAS,CAACC,MAAV,KAAqB,EAA1C,IAAgDH,MAAM,CAACG,MAAP,KAAkB,CAAzE;AACD,CATM;AAWP,OAAO,MAAMC,cAAc,GAAG,CAC5BC,UAD4B,EAE5BC,UAF4B,EAG5BC,QAH4B,KAIjB;AACX,MAAI,CAACF,UAAL,EAAiB,MAAM,IAAIG,KAAJ,CAAU,4BAAV,CAAN;AACjB,SACEH,UAAU,CAACI,SAAX,CAAqB,CAArB,EAAwBH,UAAxB,IACA,KADA,GAEAD,UAAU,CAACI,SAAX,CAAqBJ,UAAU,CAACF,MAAX,GAAoBI,QAAzC,CAHF;AAKD,CAXM;AAaP,OAAO,MAAMG,gBAAgB,GAAIC,YAAD,IAA0B;AACxD,MAAI,CAAClB,WAAW,CAACkB,YAAD,CAAhB,EAAgC;AAC9B,UAAM,IAAIH,KAAJ,CAAU,kCAAV,CAAN;AACD,GAHuD,CAIxD;;;AACA,SAAOG,YAAY,CAACC,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAAP;AACD,CANM;AAQP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AAC5C,MAAI,CAACrB,WAAW,CAACqB,KAAD,CAAhB,EAAyB;AACvB,UAAM,IAAIN,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,SAAO,CAAC,CAACM,KAAD,GAAS,UAAV,EAAsBC,QAAtB,EAAP;AACD,CALM","sourcesContent":["import { decodeBase16 } from 'casper-js-sdk';\n\nexport const isNumberish = (stringNumber: string) => {\n  return !isNaN(+stringNumber);\n};\n\nexport const isURefString = (value: string) => {\n  if (typeof value !== 'string') return false;\n\n  const [prefix, uref, suffix] = value.split('-');\n\n  if (!prefix || !uref || !suffix) return false;\n\n  const urefBytes = decodeBase16(uref);\n  return prefix === 'uref' && urefBytes.length === 32 && suffix.length === 3;\n};\n\nexport const truncateString = (\n  longString: string,\n  startChunk: number,\n  endChunk: number\n): string => {\n  if (!longString) throw new Error('Error parsing long string.');\n  return (\n    longString.substring(0, startChunk) +\n    '...' +\n    longString.substring(longString.length - endChunk)\n  );\n};\n\nexport const numberWithSpaces = (numberString: string) => {\n  if (!isNumberish(numberString)) {\n    throw new Error('Unable to parse string as number');\n  }\n  // Adds a space in after 3 digits\n  return numberString.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n};\n\nexport const motesToCSPR = (motes: string) => {\n  if (!isNumberish(motes)) {\n    throw new Error('Unable to parse motes string as number');\n  }\n  return (+motes / 1000000000).toString();\n};\n"]},"metadata":{},"sourceType":"module"}