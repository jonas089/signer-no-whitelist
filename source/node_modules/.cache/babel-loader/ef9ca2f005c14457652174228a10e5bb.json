{"ast":null,"code":"import _applyDecoratedDescriptor from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _dec, _class;\n\nimport { browser } from 'webextension-polyfill-ts';\nimport { Rpc } from '../lib/rpc/rpc';\nimport { action } from 'mobx';\nexport let BackgroundManager = (_dec = action.bound, (_class = class BackgroundManager {\n  constructor(appState, errors) {\n    this.appState = appState;\n    this.errors = errors;\n    this.rpc = void 0;\n    // RPC is duplex\n    this.rpc = new Rpc({\n      addListener: browser.runtime.onMessage.addListener,\n      destination: 'background',\n      logMessages: false,\n      postMessage: browser.runtime.sendMessage,\n      source: 'popup'\n    });\n    this.rpc.register('popup.updateState', this.onStateUpdate.bind(this));\n    this.rpc.call('background.getState').then(appState => {\n      this.onStateUpdate(appState);\n    });\n  }\n\n  onStateUpdate(appState) {\n    this.appState.isIntegratedSite = appState.isIntegratedSite;\n    this.appState.isUnlocked = appState.isUnlocked;\n    this.appState.unlockAttempts = appState.unlockAttempts;\n    this.appState.lockoutTimerStarted = appState.lockoutTimerStarted;\n    this.appState.remainingMins = appState.remainingMins;\n    this.appState.currentTab = appState.currentTab;\n    this.appState.connectionRequested = appState.connectionRequested;\n    this.appState.connectedSites = appState.connectedSites;\n    this.appState.hasCreatedVault = appState.hasCreatedVault;\n    this.appState.activeUserAccount = appState.activeUserAccount;\n    this.appState.userAccounts.replace(appState.userAccounts);\n    this.appState.unsignedDeploys.replace(appState.unsignedDeploys);\n    this.appState.unsignedMessages.replace(appState.unsignedMessages);\n    this.appState.idleTimeoutMins = appState.idleTimeoutMins;\n    this.appState.isTimeToSecurityCheckup = appState.isTimeToSecurityCheckup;\n  }\n\n  resetSecurityCheckup() {\n    return this.errors.withCapture(this.rpc.call('account.resetSecurityCheckup'));\n  }\n\n  unlock(password) {\n    return this.errors.withCapture(this.rpc.call('account.unlock', password));\n  }\n\n  createNewVault(password) {\n    return this.rpc.call('account.createNewVault', password);\n  }\n\n  lock() {\n    return this.rpc.call('account.lock');\n  }\n\n  importUserAccount(name, secretKeyBase64, algorithm, backedUp) {\n    return this.errors.withCapture(this.rpc.call('account.importUserAccount', name, secretKeyBase64, algorithm, backedUp));\n  }\n\n  reorderAccount(index1, index2) {\n    return this.errors.withCapture(this.rpc.call('account.reorderAccount', index1, index2));\n  }\n\n  removeUserAccount(name) {\n    return this.errors.withCapture(this.rpc.call('account.removeUserAccount', name));\n  }\n\n  isBackedUp(alias) {\n    return this.errors.withCapture(this.rpc.call('account.isBackedUp', alias));\n  }\n\n  signDeploy(deployId) {\n    return this.errors.withCapture(this.rpc.call('sign.signDeploy', deployId));\n  }\n\n  rejectSignDeploy(deployId) {\n    return this.errors.withCapture(this.rpc.call('sign.rejectSignDeploy', deployId));\n  }\n\n  parseDeployData(deployId) {\n    return this.errors.withCapture(this.rpc.call('sign.parseDeployData', deployId));\n  }\n\n  approveSigningMessage(messageId) {\n    return this.errors.withCapture(this.rpc.call('sign.approveSigningMessage', messageId));\n  }\n\n  cancelSigningMessage(messageId) {\n    return this.errors.withCapture(this.rpc.call('sign.cancelSigningMessage', messageId));\n  }\n\n  switchToAccount(accountName) {\n    return this.errors.withCapture(this.rpc.call('account.switchToAccount', accountName));\n  }\n\n  getActiveUserAccount() {\n    return this.errors.withCapture(this.rpc.call('account.getActiveUserAccount'));\n  }\n\n  getActivePublicKeyHex() {\n    return this.errors.withCapture(this.rpc.call('account.getActivePublicKeyHex'));\n  }\n\n  getActiveAccountHash() {\n    return this.errors.withCapture(this.rpc.call('account.getActiveAccountHash'));\n  }\n\n  getPublicKeyHexByAlias(alias) {\n    return this.errors.withCapture(this.rpc.call('account.getPublicKeyHexByAlias', alias));\n  }\n\n  getAccountHashByAlias(alias) {\n    return this.errors.withCapture(this.rpc.call('account.getAccountHashByAlias', alias));\n  }\n\n  resetVault() {\n    return this.errors.withCapture(this.rpc.call('account.resetVault'));\n  }\n\n  resetLockout() {\n    return this.errors.withCapture(this.rpc.call('account.resetLockout'));\n  }\n\n  startLockoutTimer(timeInMinutes) {\n    return this.errors.withCapture(this.rpc.call('account.startLockoutTimer', timeInMinutes));\n  }\n\n  resetLockoutTimer() {\n    return this.errors.withCapture(this.rpc.call('account.resetLockoutTimer'));\n  }\n\n  renameUserAccount(oldName, newName) {\n    return this.errors.withCapture(this.rpc.call('account.renameUserAccount', oldName, newName));\n  }\n\n  downloadAccountKeys(alias) {\n    return this.errors.withCapture(this.rpc.call('account.downloadAccountKeys', alias));\n  }\n\n  connectToSite(url) {\n    return this.errors.withCapture(this.rpc.call('connection.connectToSite', url));\n  }\n\n  disconnectFromSite(site) {\n    return this.errors.withCapture(this.rpc.call('connection.disconnectFromSite', site));\n  }\n\n  removeSite(url) {\n    return this.errors.withCapture(this.rpc.call('connection.removeSite', url));\n  }\n\n  resetConnectionRequest() {\n    return this.errors.withCapture(this.rpc.call('connection.resetConnectionRequest'));\n  }\n\n  confirmPassword(password) {\n    return this.errors.withCapture(this.rpc.call('account.confirmPassword', password));\n  }\n\n  isIntegratedSite(hostname) {\n    return this.errors.withCapture(this.rpc.call('connection.isIntegratedSite', hostname));\n  }\n\n  configureTimeout(durationMins) {\n    return this.errors.withCapture(this.rpc.call('account.configureTimeout', durationMins));\n  }\n\n  callOpenPopup(purposeForOpening) {\n    return this.errors.withCapture(this.rpc.call('popup.openPopup', purposeForOpening));\n  }\n\n  callClosePopup(signingId) {\n    // first parameter is undefined to cover the optional windowId arg\n    return this.errors.withCapture(this.rpc.call('popup.closePopup', undefined, signingId));\n  }\n\n}, (_applyDecoratedDescriptor(_class.prototype, \"onStateUpdate\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"onStateUpdate\"), _class.prototype)), _class));","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/BackgroundManager.ts"],"names":["browser","Rpc","action","BackgroundManager","bound","constructor","appState","errors","rpc","addListener","runtime","onMessage","destination","logMessages","postMessage","sendMessage","source","register","onStateUpdate","bind","call","then","isIntegratedSite","isUnlocked","unlockAttempts","lockoutTimerStarted","remainingMins","currentTab","connectionRequested","connectedSites","hasCreatedVault","activeUserAccount","userAccounts","replace","unsignedDeploys","unsignedMessages","idleTimeoutMins","isTimeToSecurityCheckup","resetSecurityCheckup","withCapture","unlock","password","createNewVault","lock","importUserAccount","name","secretKeyBase64","algorithm","backedUp","reorderAccount","index1","index2","removeUserAccount","isBackedUp","alias","signDeploy","deployId","rejectSignDeploy","parseDeployData","approveSigningMessage","messageId","cancelSigningMessage","switchToAccount","accountName","getActiveUserAccount","getActivePublicKeyHex","getActiveAccountHash","getPublicKeyHexByAlias","getAccountHashByAlias","resetVault","resetLockout","startLockoutTimer","timeInMinutes","resetLockoutTimer","renameUserAccount","oldName","newName","downloadAccountKeys","connectToSite","url","disconnectFromSite","site","removeSite","resetConnectionRequest","confirmPassword","hostname","configureTimeout","durationMins","callOpenPopup","purposeForOpening","callClosePopup","signingId","undefined"],"mappings":"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","sourcesContent":["import { browser } from 'webextension-polyfill-ts';\nimport { Rpc } from '../lib/rpc/rpc';\nimport { AppState } from '../lib/MemStore';\nimport { action } from 'mobx';\nimport ErrorContainer from './container/ErrorContainer';\nimport { KeyPairWithAlias } from '../@types/models';\nimport { DeployData } from '../background/SigningManager';\nimport { PurposeForOpening } from '../shared';\n\nexport class BackgroundManager {\n  private rpc: Rpc;\n\n  constructor(private appState: AppState, private errors: ErrorContainer) {\n    // RPC is duplex\n    this.rpc = new Rpc({\n      addListener: browser.runtime.onMessage.addListener,\n      destination: 'background',\n      logMessages: false,\n      postMessage: browser.runtime.sendMessage,\n      source: 'popup'\n    });\n\n    this.rpc.register('popup.updateState', this.onStateUpdate.bind(this));\n    this.rpc.call<AppState>('background.getState').then(appState => {\n      this.onStateUpdate(appState);\n    });\n  }\n\n  @action.bound\n  private onStateUpdate(appState: AppState) {\n    this.appState.isIntegratedSite = appState.isIntegratedSite;\n    this.appState.isUnlocked = appState.isUnlocked;\n    this.appState.unlockAttempts = appState.unlockAttempts;\n    this.appState.lockoutTimerStarted = appState.lockoutTimerStarted;\n    this.appState.remainingMins = appState.remainingMins;\n    this.appState.currentTab = appState.currentTab;\n    this.appState.connectionRequested = appState.connectionRequested;\n    this.appState.connectedSites = appState.connectedSites;\n    this.appState.hasCreatedVault = appState.hasCreatedVault;\n    this.appState.activeUserAccount = appState.activeUserAccount;\n    this.appState.userAccounts.replace(appState.userAccounts);\n    this.appState.unsignedDeploys.replace(appState.unsignedDeploys);\n    this.appState.unsignedMessages.replace(appState.unsignedMessages);\n    this.appState.idleTimeoutMins = appState.idleTimeoutMins;\n    this.appState.isTimeToSecurityCheckup = appState.isTimeToSecurityCheckup;\n  }\n\n  public resetSecurityCheckup() {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.resetSecurityCheckup')\n    );\n  }\n\n  public unlock(password: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.unlock', password)\n    );\n  }\n\n  public createNewVault(password: string) {\n    return this.rpc.call<void>('account.createNewVault', password);\n  }\n\n  public lock() {\n    return this.rpc.call<void>('account.lock');\n  }\n\n  public importUserAccount(\n    name: string,\n    secretKeyBase64: string,\n    algorithm: string,\n    backedUp: boolean\n  ) {\n    return this.errors.withCapture(\n      this.rpc.call<void>(\n        'account.importUserAccount',\n        name,\n        secretKeyBase64,\n        algorithm,\n        backedUp\n      )\n    );\n  }\n\n  public reorderAccount(index1: number, index2: number) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.reorderAccount', index1, index2)\n    );\n  }\n\n  public removeUserAccount(name: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.removeUserAccount', name)\n    );\n  }\n\n  public isBackedUp(alias: string) {\n    return this.errors.withCapture(\n      this.rpc.call<boolean>('account.isBackedUp', alias)\n    );\n  }\n\n  public signDeploy(deployId: number) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('sign.signDeploy', deployId)\n    );\n  }\n\n  public rejectSignDeploy(deployId: number) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('sign.rejectSignDeploy', deployId)\n    );\n  }\n\n  public parseDeployData(deployId: number) {\n    return this.errors.withCapture(\n      this.rpc.call<DeployData>('sign.parseDeployData', deployId)\n    );\n  }\n\n  public approveSigningMessage(messageId: number) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('sign.approveSigningMessage', messageId)\n    );\n  }\n\n  public cancelSigningMessage(messageId: number) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('sign.cancelSigningMessage', messageId)\n    );\n  }\n\n  public switchToAccount(accountName: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.switchToAccount', accountName)\n    );\n  }\n\n  public getActiveUserAccount() {\n    return this.errors.withCapture(\n      this.rpc.call<KeyPairWithAlias>('account.getActiveUserAccount')\n    );\n  }\n\n  public getActivePublicKeyHex() {\n    return this.errors.withCapture(\n      this.rpc.call<string>('account.getActivePublicKeyHex')\n    );\n  }\n\n  public getActiveAccountHash() {\n    return this.errors.withCapture(\n      this.rpc.call<string>('account.getActiveAccountHash')\n    );\n  }\n\n  public getPublicKeyHexByAlias(alias: string) {\n    return this.errors.withCapture(\n      this.rpc.call<string>('account.getPublicKeyHexByAlias', alias)\n    );\n  }\n\n  public getAccountHashByAlias(alias: string) {\n    return this.errors.withCapture(\n      this.rpc.call<string>('account.getAccountHashByAlias', alias)\n    );\n  }\n\n  public resetVault() {\n    return this.errors.withCapture(this.rpc.call<void>('account.resetVault'));\n  }\n\n  public resetLockout() {\n    return this.errors.withCapture(this.rpc.call<void>('account.resetLockout'));\n  }\n\n  public startLockoutTimer(timeInMinutes: number) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.startLockoutTimer', timeInMinutes)\n    );\n  }\n\n  public resetLockoutTimer() {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.resetLockoutTimer')\n    );\n  }\n\n  public renameUserAccount(oldName: string, newName: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.renameUserAccount', oldName, newName)\n    );\n  }\n\n  public downloadAccountKeys(alias: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.downloadAccountKeys', alias)\n    );\n  }\n  public connectToSite(url?: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('connection.connectToSite', url)\n    );\n  }\n\n  public disconnectFromSite(site?: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('connection.disconnectFromSite', site)\n    );\n  }\n\n  public removeSite(url: string) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('connection.removeSite', url)\n    );\n  }\n\n  public resetConnectionRequest() {\n    return this.errors.withCapture(\n      this.rpc.call<void>('connection.resetConnectionRequest')\n    );\n  }\n\n  public confirmPassword(password: string) {\n    return this.errors.withCapture(\n      this.rpc.call<boolean>('account.confirmPassword', password)\n    );\n  }\n\n  public isIntegratedSite(hostname: string) {\n    return this.errors.withCapture(\n      this.rpc.call<boolean>('connection.isIntegratedSite', hostname)\n    );\n  }\n\n  public configureTimeout(durationMins: number) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('account.configureTimeout', durationMins)\n    );\n  }\n\n  public callOpenPopup(purposeForOpening: PurposeForOpening) {\n    return this.errors.withCapture(\n      this.rpc.call<void>('popup.openPopup', purposeForOpening)\n    );\n  }\n\n  public callClosePopup(signingId?: number) {\n    // first parameter is undefined to cover the optional windowId arg\n    return this.errors.withCapture(\n      this.rpc.call<void>('popup.closePopup', undefined, signingId)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}