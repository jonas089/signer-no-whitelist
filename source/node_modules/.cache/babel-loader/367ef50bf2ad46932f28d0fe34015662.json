{"ast":null,"code":"var _jsxFileName = \"/home/chef/Desktop/signer/src/popup/components/SignDeployPage.tsx\",\n    _class;\n\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { Redirect, withRouter } from 'react-router';\nimport { parseRow } from '../container/SigningContainer';\nimport Pages from './Pages';\nimport { browser } from 'webextension-polyfill-ts';\nimport { Box, Button, Collapse, IconButton, Grid, Table, TableBody, TableCell, TableContainer, TableRow, Typography } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport { BlankTooltipContent, TooltippedTableRow } from './Tooltipped';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nlet SignDeployPage = observer(_class = class SignDeployPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      genericRows: [],\n      deploySpecificRows: [],\n      deployToSign: this.props.signingContainer.deployToSign,\n      argsExpanded: false\n    };\n  }\n\n  async componentDidMount() {\n    let w = await browser.windows.getCurrent();\n\n    if (w.type === 'popup') {\n      window.addEventListener('beforeunload', e => {\n        var _this$state$deployToS;\n\n        this.props.signingContainer.cancel((_this$state$deployToS = this.state.deployToSign) === null || _this$state$deployToS === void 0 ? void 0 : _this$state$deployToS.id);\n      });\n    }\n\n    if (this.state.deployToSign) {\n      this.generateDeployInfo(this.state.deployToSign);\n    }\n  }\n\n  async generateDeployInfo(deployToSign) {\n    const deployData = await this.props.signingContainer.parseDeployData(deployToSign.id); // Filters out non-generic and irrelevant data points, also re-orders.\n\n    const orderedGenericData = {\n      'Signing Key': deployData.signingKey,\n      Account: deployData.account,\n      'Deploy Hash': deployData.deployHash,\n      Timestamp: deployData.timestamp,\n      'Chain Name': deployData.chainName,\n      Payment: deployData.payment,\n      'Deploy Type': deployData.deployType\n    };\n    let baseRows = [];\n\n    for (let [key, value] of Object.entries(orderedGenericData)) {\n      const row = parseRow({\n        key,\n        value,\n        tooltipContent: BlankTooltipContent\n      });\n      baseRows.push(row);\n    }\n\n    let argRows = [];\n\n    for (let [key, value] of Object.entries(deployData.deployArgs)) {\n      const row = parseRow({\n        key,\n        value,\n        tooltipContent: BlankTooltipContent\n      });\n      argRows.push(row);\n    }\n\n    this.setState({\n      genericRows: baseRows,\n      deploySpecificRows: argRows,\n      argsExpanded: argRows.length < 4\n    });\n  }\n\n  render() {\n    if (this.state.deployToSign && this.props.accountManager.isUnLocked) {\n      var _this$props$signingCo;\n\n      const deployId = (_this$props$signingCo = this.props.signingContainer.deployToSign) === null || _this$props$signingCo === void 0 ? void 0 : _this$props$signingCo.id;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          marginTop: '-30px',\n          width: '100vw'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          align: 'center',\n          variant: 'h6',\n          children: \"Signature Request\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            style: {\n              width: '90%'\n            },\n            children: /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [this.state.genericRows.map(row => /*#__PURE__*/_jsxDEV(TooltippedTableRow, {\n                data: row\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this)), this.state.genericRows.some(row => row.key === 'Deploy Type' && row.value === 'Transfer') ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    component: \"th\",\n                    scope: \"row\",\n                    style: {\n                      fontWeight: 'bold'\n                    },\n                    colSpan: 2,\n                    align: \"center\",\n                    children: \"Transfer Data\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    style: {\n                      paddingBottom: 0,\n                      paddingTop: 0\n                    },\n                    colSpan: 2,\n                    children: /*#__PURE__*/_jsxDEV(Table, {\n                      size: \"small\",\n                      children: /*#__PURE__*/_jsxDEV(TableBody, {\n                        children: this.state.deploySpecificRows.map(row => /*#__PURE__*/_jsxDEV(TooltippedTableRow, {\n                          data: row\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 147,\n                          columnNumber: 31\n                        }, this))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 145,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 144,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true) :\n              /*#__PURE__*/\n\n              /**\n               *  Deploy specific arguments\n               */\n              _jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    component: \"th\",\n                    scope: \"row\",\n                    style: {\n                      fontWeight: 'bold'\n                    },\n                    children: \"Contract Arguments\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(IconButton, {\n                      size: \"small\",\n                      onClick: () => this.setState({\n                        argsExpanded: !this.state.argsExpanded\n                      }),\n                      children: this.state.argsExpanded ? /*#__PURE__*/_jsxDEV(KeyboardArrowUpIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 177,\n                        columnNumber: 29\n                      }, this) : /*#__PURE__*/_jsxDEV(KeyboardArrowDownIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 179,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    style: {\n                      paddingBottom: 0,\n                      paddingTop: 0\n                    },\n                    colSpan: 2,\n                    children: /*#__PURE__*/_jsxDEV(Collapse, {\n                      in: this.state.argsExpanded,\n                      timeout: \"auto\",\n                      unmountOnExit: true,\n                      children: /*#__PURE__*/_jsxDEV(Table, {\n                        size: \"small\",\n                        children: /*#__PURE__*/_jsxDEV(TableBody, {\n                          children: this.state.deploySpecificRows.map(row => /*#__PURE__*/_jsxDEV(TooltippedTableRow, {\n                            data: row\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 197,\n                            columnNumber: 33\n                          }, this))\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 195,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 194,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 8,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            style: {\n              marginTop: '-50px'\n            },\n            spacing: 4,\n            justify: 'center',\n            alignItems: 'center',\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"secondary\",\n                onClick: async () => {\n                  await this.props.signingContainer.cancel(deployId);\n                  await this.props.popupContainer.callClosePopup(); // This is required in the case that the user avoids the popup and instead\n                  // interacts with the default extension window.\n\n                  window.close();\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: async () => {\n                  await this.props.signingContainer.signDeploy(deployId);\n                  await this.props.popupContainer.callClosePopup(); // This is required in the case that the user avoids the popup and instead\n                  // interacts with the default extension window.\n\n                  window.close();\n                },\n                variant: \"contained\",\n                color: \"primary\",\n                style: {\n                  backgroundColor: 'var(--cspr-dark-blue)'\n                },\n                children: \"Sign\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: Pages.Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}) || _class;\n\nexport default _c = withRouter(SignDeployPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/components/SignDeployPage.tsx"],"names":["observer","React","Redirect","withRouter","parseRow","Pages","browser","Box","Button","Collapse","IconButton","Grid","Table","TableBody","TableCell","TableContainer","TableRow","Typography","KeyboardArrowDownIcon","KeyboardArrowUpIcon","BlankTooltipContent","TooltippedTableRow","SignDeployPage","Component","constructor","props","state","genericRows","deploySpecificRows","deployToSign","signingContainer","argsExpanded","componentDidMount","w","windows","getCurrent","type","window","addEventListener","e","cancel","id","generateDeployInfo","deployData","parseDeployData","orderedGenericData","signingKey","Account","account","deployHash","Timestamp","timestamp","chainName","Payment","payment","deployType","baseRows","key","value","Object","entries","row","tooltipContent","push","argRows","deployArgs","setState","length","render","accountManager","isUnLocked","deployId","flexGrow","marginTop","width","map","some","fontWeight","paddingBottom","paddingTop","popupContainer","callClosePopup","close","signDeploy","backgroundColor","Home"],"mappings":"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","sourcesContent":["import { observer } from 'mobx-react';\nimport React from 'react';\nimport { Redirect, RouteComponentProps, withRouter } from 'react-router';\nimport SigningContainer, { parseRow } from '../container/SigningContainer';\nimport Pages from './Pages';\nimport { browser } from 'webextension-polyfill-ts';\nimport AccountManager from '../container/AccountManager';\nimport {\n  Box,\n  Button,\n  Collapse,\n  IconButton,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport { deployWithID } from '../../background/SigningManager';\nimport PopupContainer from '../container/PopupContainer';\nimport { SigningDataRow } from '../../shared';\nimport { BlankTooltipContent, TooltippedTableRow } from './Tooltipped';\n\ninterface Props extends RouteComponentProps {\n  signingContainer: SigningContainer;\n  accountManager: AccountManager;\n  popupContainer: PopupContainer;\n}\n\n@observer\nclass SignDeployPage extends React.Component<\n  Props,\n  {\n    genericRows: SigningDataRow[];\n    deploySpecificRows: SigningDataRow[];\n    deployToSign: deployWithID | null;\n    argsExpanded: boolean;\n  }\n> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      genericRows: [],\n      deploySpecificRows: [],\n      deployToSign: this.props.signingContainer.deployToSign,\n      argsExpanded: false\n    };\n  }\n\n  async componentDidMount() {\n    let w = await browser.windows.getCurrent();\n    if (w.type === 'popup') {\n      window.addEventListener('beforeunload', e => {\n        this.props.signingContainer.cancel(this.state.deployToSign?.id!);\n      });\n    }\n    if (this.state.deployToSign) {\n      this.generateDeployInfo(this.state.deployToSign);\n    }\n  }\n\n  async generateDeployInfo(deployToSign: deployWithID) {\n    const deployData = await this.props.signingContainer.parseDeployData(\n      deployToSign.id\n    );\n    // Filters out non-generic and irrelevant data points, also re-orders.\n    const orderedGenericData = {\n      'Signing Key': deployData.signingKey,\n      Account: deployData.account,\n      'Deploy Hash': deployData.deployHash,\n      Timestamp: deployData.timestamp,\n      'Chain Name': deployData.chainName,\n      Payment: deployData.payment,\n      'Deploy Type': deployData.deployType\n    };\n    let baseRows: SigningDataRow[] = [];\n    for (let [key, value] of Object.entries(orderedGenericData)) {\n      const row = parseRow({ key, value, tooltipContent: BlankTooltipContent });\n      baseRows.push(row);\n    }\n    let argRows: SigningDataRow[] = [];\n    for (let [key, value] of Object.entries(deployData.deployArgs)) {\n      const row = parseRow({ key, value, tooltipContent: BlankTooltipContent });\n      argRows.push(row);\n    }\n    this.setState({\n      genericRows: baseRows,\n      deploySpecificRows: argRows,\n      argsExpanded: argRows.length < 4\n    });\n  }\n\n  render() {\n    if (this.state.deployToSign && this.props.accountManager.isUnLocked) {\n      const deployId = this.props.signingContainer.deployToSign?.id;\n      return (\n        <div\n          style={{\n            flexGrow: 1,\n            marginTop: '-30px',\n            width: '100vw'\n          }}\n        >\n          <Typography align={'center'} variant={'h6'}>\n            Signature Request\n          </Typography>\n          <TableContainer>\n            <Table style={{ width: '90%' }}>\n              <TableBody>\n                {/* \n                  Displays the data generic to all deploys\n                */}\n                {this.state.genericRows.map(row => (\n                  <TooltippedTableRow data={row} />\n                ))}\n                {/* \n                  Deploy Specific Arguments\n                  Special handling for native transfers\n                */}\n                {this.state.genericRows.some(\n                  row => row.key === 'Deploy Type' && row.value === 'Transfer'\n                ) ? (\n                  <>\n                    <TableRow>\n                      <TableCell\n                        component=\"th\"\n                        scope=\"row\"\n                        style={{ fontWeight: 'bold' }}\n                        colSpan={2}\n                        align=\"center\"\n                      >\n                        Transfer Data\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell\n                        style={{ paddingBottom: 0, paddingTop: 0 }}\n                        colSpan={2}\n                      >\n                        <Table size=\"small\">\n                          <TableBody>\n                            {this.state.deploySpecificRows.map(row => (\n                              <TooltippedTableRow data={row} />\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableCell>\n                    </TableRow>\n                  </>\n                ) : (\n                  /**\n                   *  Deploy specific arguments\n                   */\n                  <>\n                    <TableRow>\n                      <TableCell\n                        component=\"th\"\n                        scope=\"row\"\n                        style={{ fontWeight: 'bold' }}\n                      >\n                        Contract Arguments\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() =>\n                            this.setState({\n                              argsExpanded: !this.state.argsExpanded\n                            })\n                          }\n                        >\n                          {this.state.argsExpanded ? (\n                            <KeyboardArrowUpIcon />\n                          ) : (\n                            <KeyboardArrowDownIcon />\n                          )}\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell\n                        style={{ paddingBottom: 0, paddingTop: 0 }}\n                        colSpan={2}\n                      >\n                        <Collapse\n                          in={this.state.argsExpanded}\n                          timeout=\"auto\"\n                          unmountOnExit\n                        >\n                          <Table size=\"small\">\n                            <TableBody>\n                              {this.state.deploySpecificRows.map(row => (\n                                <TooltippedTableRow data={row} />\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </Collapse>\n                      </TableCell>\n                    </TableRow>\n                  </>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Box mt={8}>\n            <Grid\n              container\n              style={{ marginTop: '-50px' }}\n              spacing={4}\n              justify={'center'}\n              alignItems={'center'}\n            >\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={async () => {\n                    await this.props.signingContainer.cancel(deployId!);\n                    await this.props.popupContainer.callClosePopup();\n                    // This is required in the case that the user avoids the popup and instead\n                    // interacts with the default extension window.\n                    window.close();\n                  }}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={async () => {\n                    await this.props.signingContainer.signDeploy(deployId!);\n                    await this.props.popupContainer.callClosePopup();\n                    // This is required in the case that the user avoids the popup and instead\n                    // interacts with the default extension window.\n                    window.close();\n                  }}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{\n                    backgroundColor: 'var(--cspr-dark-blue)'\n                  }}\n                >\n                  Sign\n                </Button>\n              </Grid>\n            </Grid>\n          </Box>\n        </div>\n      );\n    } else {\n      return <Redirect to={Pages.Home} />;\n    }\n  }\n}\n\nexport default withRouter(SignDeployPage);\n"]},"metadata":{},"sourceType":"module"}