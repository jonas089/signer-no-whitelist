{"ast":null,"code":"import _initializerDefineProperty from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/chef/Desktop/signer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _jsxFileName = \"/home/chef/Desktop/signer/src/popup/components/AccountManagementPage.tsx\",\n    _class,\n    _class2,\n    _descriptor;\n\nimport React from 'react';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { List, ListItem, ListItemText, IconButton, ListItemSecondaryAction, DialogTitle, DialogContent, DialogActions, Button, Snackbar, ListSubheader, Typography, Tooltip } from '@material-ui/core';\nimport RootRef from '@material-ui/core/RootRef';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport FilterNoneIcon from '@material-ui/icons/FilterNone'; // Used for Copy\n\nimport { observer, Observer } from 'mobx-react';\nimport { observable } from 'mobx';\nimport Dialog from '@material-ui/core/Dialog';\nimport { confirm } from './Confirmation';\nimport copy from 'copy-to-clipboard';\nimport { GetApp } from '@material-ui/icons';\nimport { TextFieldWithFormState } from './Forms';\nimport { RenameAccountFormData } from '../container/ImportAccountContainer';\nimport Pages from './Pages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItemStyle = (isDragging, draggableStyle) => ({ // styles we need to apply on draggables\n  ...draggableStyle,\n  ...(isDragging && {\n    background: 'rgb(235,235,235)'\n  })\n});\n\nlet AccountManagementPage = observer(_class = (_class2 = class AccountManagementPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _initializerDefineProperty(this, \"renameAccountForm\", _descriptor, this);\n\n    this.handleClickOpen = account => {\n      this.setState({\n        openDialog: true,\n        selectedAccount: account,\n        alias: account.alias\n      });\n    };\n\n    this.handleViewKey = async accountName => {\n      let hexKey = await this.props.accountManager.getPublicKeyHexByAlias(accountName);\n      let hash = await this.props.accountManager.getAccountHashByAlias(accountName);\n      this.setState({\n        alias: accountName,\n        publicKeyHex: hexKey,\n        accountHash: hash,\n        openKeyDialog: true\n      });\n    };\n\n    this.handleDownloadKeys = async alias => {\n      return await this.props.accountManager.downloadPemFiles(alias);\n    };\n\n    this.handleCopyMessage = (event, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      this.setState({\n        copyStatus: false\n      });\n    };\n\n    this.handleClose = () => {\n      this.renameAccountForm.resetFields();\n      this.setState({\n        openDialog: false,\n        openKeyDialog: false,\n        selectedAccount: null\n      });\n    };\n\n    this.handleUpdateName = () => {\n      let account = this.state.selectedAccount;\n      let alias = this.renameAccountForm.name.$;\n\n      if (account && alias) {\n        this.props.errorsContainer.capture(this.props.accountManager.renameUserAccount(account.alias, alias));\n        this.handleClose();\n      }\n    };\n\n    this.onDragEnd = result => {\n      // dropped outside the list\n      if (!result.destination) {\n        return;\n      }\n\n      this.props.accountManager.reorderAccount(result.source.index, result.destination.index);\n    };\n\n    this.handleClickRemove = async name => {\n      let backedUp = await this.props.accountManager.isBackedUp(name);\n      !backedUp ? confirm( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-danger\",\n        children: \"Back up account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"This account has not been backed up.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"You will not be able to recover this account without your key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), \"Would you like to download the key files for \", name, \"?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), 'Download', 'Cancel', {}).then(async () => await this.props.accountManager.downloadPemFiles(name)) : confirm( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-danger\",\n        children: \"Remove account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"This account will be permanently deleted. Confirm password to remove account: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), 'Remove', 'Cancel', {\n        requirePassword: true,\n        requireCheckbox: true,\n        checkboxText: 'I understand I will need the key files to recover this account'\n      }).then(async () => await this.props.accountManager.removeUserAccount(name));\n    };\n\n    const aliases = props.accountManager.userAccounts.map(account => {\n      return account.alias;\n    });\n    this.renameAccountForm = new RenameAccountFormData(aliases);\n    this.state = {\n      openDialog: false,\n      openKeyDialog: false,\n      selectedAccount: null,\n      alias: null,\n      publicKey: null,\n      publicKeyHex: null,\n      accountHash: null,\n      copyStatus: false\n    };\n  }\n\n  render() {\n    return !this.props.accountManager.isUnLocked || !this.props.accountManager.userAccounts[0] ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: Pages.Home\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: result => this.onDragEnd(result),\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(Observer, {\n            children: () =>\n            /*#__PURE__*/\n            // TODO: fix this (deprecated RootRef)\n            _jsxDEV(RootRef, {\n              rootRef: provided.innerRef,\n              children: /*#__PURE__*/_jsxDEV(List, {\n                children: [this.props.accountManager.userAccounts.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: item.alias,\n                  index: index,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(ListItem, {\n                    innerRef: provided.innerRef,\n                    ContainerProps: { ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style)\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: item.alias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 231,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                      children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                        title: \"Edit\",\n                        children: /*#__PURE__*/_jsxDEV(IconButton, {\n                          \"aria-label\": \"Button will open a dialog to rename key\",\n                          edge: 'end',\n                          onClick: () => {\n                            this.handleClickOpen(item);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 241,\n                            columnNumber: 39\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 234,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 233,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                        title: \"Delete\",\n                        children: /*#__PURE__*/_jsxDEV(IconButton, {\n                          edge: 'end',\n                          onClick: () => {\n                            this.handleClickRemove(item.alias);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 251,\n                            columnNumber: 39\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 245,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 244,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                        title: \"View\",\n                        children: /*#__PURE__*/_jsxDEV(IconButton, {\n                          edge: 'end',\n                          onClick: () => {\n                            this.handleViewKey(item.alias);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(VpnKeyIcon, {}, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 261,\n                            columnNumber: 39\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 255,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 254,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                        title: \"Download\",\n                        children: /*#__PURE__*/_jsxDEV(IconButton, {\n                          edge: 'end',\n                          onClick: () => {\n                            this.handleDownloadKeys(item.alias);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(GetApp, {}, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 271,\n                            columnNumber: 39\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 265,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 264,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 31\n                  }, this)\n                }, item.alias, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 27\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.openDialog,\n        onClose: this.handleClose,\n        \"aria-label\": \"Form to rename account - focus will be given to name input field\",\n        \"aria-labelledby\": \"form-dialog-title\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"form-dialog-title\",\n            children: \"Rename\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: /*#__PURE__*/_jsxDEV(TextFieldWithFormState, {\n              autoFocus: true,\n              fullWidth: true,\n              label: \"Rename account\",\n              placeholder: \"Account alias\",\n              id: \"rename-account\",\n              fieldState: this.renameAccountForm.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: this.handleClose,\n              color: \"primary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              onClick: this.handleUpdateName,\n              color: \"primary\",\n              disabled: this.renameAccountForm.submitDisabled,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        fullScreen: true,\n        open: this.state.openKeyDialog,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"form-dialog-title\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          id: \"form-dialog-title\",\n          children: \"Account Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(List, {\n            children: [/*#__PURE__*/_jsxDEV(ListSubheader, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: 'h6',\n                children: this.state.alias\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                edge: 'start',\n                onClick: () => {\n                  copy(this.state.publicKeyHex);\n                  this.setState({\n                    copyStatus: true\n                  });\n                },\n                children: /*#__PURE__*/_jsxDEV(FilterNoneIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: `Public Key: ${this.state.publicKeyHex}`,\n                style: {\n                  overflowWrap: 'break-word'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                edge: 'start',\n                onClick: () => {\n                  copy(this.state.accountHash);\n                  this.setState({\n                    copyStatus: true\n                  });\n                },\n                children: /*#__PURE__*/_jsxDEV(FilterNoneIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: `Account Hash: ${this.state.accountHash}`,\n                style: {\n                  overflowWrap: 'break-word'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n            open: this.state.copyStatus,\n            message: \"Copied!\",\n            autoHideDuration: 1500,\n            onClose: this.handleCopyMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.handleClose,\n            color: \"primary\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"renameAccountForm\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class;\n\nexport default _c = withRouter(AccountManagementPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/popup/components/AccountManagementPage.tsx"],"names":["React","Redirect","withRouter","List","ListItem","ListItemText","IconButton","ListItemSecondaryAction","DialogTitle","DialogContent","DialogActions","Button","Snackbar","ListSubheader","Typography","Tooltip","RootRef","DragDropContext","Droppable","Draggable","DeleteIcon","EditIcon","VpnKeyIcon","FilterNoneIcon","observer","Observer","observable","Dialog","confirm","copy","GetApp","TextFieldWithFormState","RenameAccountFormData","Pages","getItemStyle","isDragging","draggableStyle","background","AccountManagementPage","Component","constructor","props","handleClickOpen","account","setState","openDialog","selectedAccount","alias","handleViewKey","accountName","hexKey","accountManager","getPublicKeyHexByAlias","hash","getAccountHashByAlias","publicKeyHex","accountHash","openKeyDialog","handleDownloadKeys","downloadPemFiles","handleCopyMessage","event","reason","copyStatus","handleClose","renameAccountForm","resetFields","handleUpdateName","state","name","$","errorsContainer","capture","renameUserAccount","onDragEnd","result","destination","reorderAccount","source","index","handleClickRemove","backedUp","isBackedUp","then","requirePassword","requireCheckbox","checkboxText","removeUserAccount","aliases","userAccounts","map","publicKey","render","isUnLocked","Home","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder","submitDisabled","overflowWrap"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect, RouteComponentProps, withRouter } from 'react-router-dom';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  IconButton,\n  ListItemSecondaryAction,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Snackbar,\n  ListSubheader,\n  Typography,\n  Tooltip\n} from '@material-ui/core';\nimport RootRef from '@material-ui/core/RootRef';\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n  DropResult\n} from 'react-beautiful-dnd';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport FilterNoneIcon from '@material-ui/icons/FilterNone'; // Used for Copy\nimport AccountManager from '../container/AccountManager';\nimport ConnectSignerContainer from '../container/ConnectSignerContainer';\nimport { observer, Observer } from 'mobx-react';\nimport { observable } from 'mobx';\nimport Dialog from '@material-ui/core/Dialog';\nimport { confirm } from './Confirmation';\nimport copy from 'copy-to-clipboard';\nimport { KeyPairWithAlias } from '../../@types/models';\nimport { CLPublicKey } from 'casper-js-sdk';\nimport { GetApp } from '@material-ui/icons';\nimport { TextFieldWithFormState } from './Forms';\nimport { RenameAccountFormData } from '../container/ImportAccountContainer';\nimport ErrorContainer from '../container/ErrorContainer';\nimport Pages from './Pages';\n\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n  // styles we need to apply on draggables\n  ...draggableStyle,\n\n  ...(isDragging && {\n    background: 'rgb(235,235,235)'\n  })\n});\n\ninterface Props extends RouteComponentProps {\n  accountManager: AccountManager;\n  connectionContainer: ConnectSignerContainer;\n  errorsContainer: ErrorContainer;\n}\n\ninterface State {\n  openDialog: boolean;\n  openKeyDialog: boolean;\n  selectedAccount: KeyPairWithAlias | null;\n  alias: string | null;\n  publicKey: CLPublicKey | null;\n  publicKeyHex: string | null;\n  accountHash: string | null;\n  copyStatus: boolean;\n}\n\n@observer\nclass AccountManagementPage extends React.Component<Props, State> {\n  @observable renameAccountForm: RenameAccountFormData;\n\n  constructor(props: Props) {\n    super(props);\n    const aliases = props.accountManager.userAccounts.map(account => {\n      return account.alias;\n    });\n    this.renameAccountForm = new RenameAccountFormData(aliases);\n    this.state = {\n      openDialog: false,\n      openKeyDialog: false,\n      selectedAccount: null,\n      alias: null,\n      publicKey: null,\n      publicKeyHex: null,\n      accountHash: null,\n      copyStatus: false\n    };\n  }\n\n  handleClickOpen = (account: KeyPairWithAlias) => {\n    this.setState({\n      openDialog: true,\n      selectedAccount: account,\n      alias: account.alias\n    });\n  };\n\n  handleViewKey = async (accountName: string) => {\n    let hexKey = await this.props.accountManager.getPublicKeyHexByAlias(\n      accountName\n    );\n    let hash = await this.props.accountManager.getAccountHashByAlias(\n      accountName\n    );\n    this.setState({\n      alias: accountName,\n      publicKeyHex: hexKey,\n      accountHash: hash,\n      openKeyDialog: true\n    });\n  };\n\n  handleDownloadKeys = async (alias: string) => {\n    return await this.props.accountManager.downloadPemFiles(alias);\n  };\n\n  handleCopyMessage = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    this.setState({ copyStatus: false });\n  };\n\n  handleClose = () => {\n    this.renameAccountForm.resetFields();\n    this.setState({\n      openDialog: false,\n      openKeyDialog: false,\n      selectedAccount: null\n    });\n  };\n\n  handleUpdateName = () => {\n    let account = this.state.selectedAccount;\n    let alias = this.renameAccountForm.name.$;\n    if (account && alias) {\n      this.props.errorsContainer.capture(\n        this.props.accountManager.renameUserAccount(account.alias, alias)\n      );\n      this.handleClose();\n    }\n  };\n\n  onDragEnd = (result: DropResult) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    this.props.accountManager.reorderAccount(\n      result.source.index,\n      result.destination.index\n    );\n  };\n\n  handleClickRemove = async (name: string) => {\n    let backedUp = await this.props.accountManager.isBackedUp(name);\n    !backedUp\n      ? confirm(\n          <div className=\"text-danger\">Back up account</div>,\n          <span>\n            This account has not been backed up.\n            <br />\n            <b>\n              You will not be able to recover this account without your key.\n            </b>\n            <br />\n            <br />\n            Would you like to download the key files for {name}?\n          </span>,\n          'Download',\n          'Cancel',\n          {}\n        ).then(\n          async () => await this.props.accountManager.downloadPemFiles(name)\n        )\n      : confirm(\n          <div className=\"text-danger\">Remove account</div>,\n          <span>\n            This account will be permanently deleted. Confirm password to remove\n            account: <b>{name}</b>\n          </span>,\n          'Remove',\n          'Cancel',\n          {\n            requirePassword: true,\n            requireCheckbox: true,\n            checkboxText:\n              'I understand I will need the key files to recover this account'\n          }\n        ).then(\n          async () => await this.props.accountManager.removeUserAccount(name)\n        );\n  };\n\n  render() {\n    return !this.props.accountManager.isUnLocked ||\n      !this.props.accountManager.userAccounts[0] ? (\n      <Redirect to={Pages.Home} />\n    ) : (\n      <React.Fragment>\n        <DragDropContext onDragEnd={result => this.onDragEnd(result)}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <Observer>\n                {() => (\n                  // TODO: fix this (deprecated RootRef)\n                  <RootRef rootRef={provided.innerRef}>\n                    <List>\n                      {this.props.accountManager.userAccounts.map(\n                        (item, index) => (\n                          <Draggable\n                            key={item.alias}\n                            draggableId={item.alias}\n                            index={index}\n                          >\n                            {(provided, snapshot) => (\n                              <ListItem\n                                innerRef={provided.innerRef}\n                                ContainerProps={{\n                                  ...provided.draggableProps,\n                                  ...provided.dragHandleProps,\n                                  style: getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                  )\n                                }}\n                              >\n                                <ListItemText primary={item.alias} />\n                                <ListItemSecondaryAction>\n                                  <Tooltip title=\"Edit\">\n                                    <IconButton\n                                      aria-label=\"Button will open a dialog to rename key\"\n                                      edge={'end'}\n                                      onClick={() => {\n                                        this.handleClickOpen(item);\n                                      }}\n                                    >\n                                      <EditIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                  <Tooltip title=\"Delete\">\n                                    <IconButton\n                                      edge={'end'}\n                                      onClick={() => {\n                                        this.handleClickRemove(item.alias);\n                                      }}\n                                    >\n                                      <DeleteIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                  <Tooltip title=\"View\">\n                                    <IconButton\n                                      edge={'end'}\n                                      onClick={() => {\n                                        this.handleViewKey(item.alias);\n                                      }}\n                                    >\n                                      <VpnKeyIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                  <Tooltip title=\"Download\">\n                                    <IconButton\n                                      edge={'end'}\n                                      onClick={() => {\n                                        this.handleDownloadKeys(item.alias);\n                                      }}\n                                    >\n                                      <GetApp />\n                                    </IconButton>\n                                  </Tooltip>\n                                </ListItemSecondaryAction>\n                              </ListItem>\n                            )}\n                          </Draggable>\n                        )\n                      )}\n                      {provided.placeholder}\n                    </List>\n                  </RootRef>\n                )}\n              </Observer>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <Dialog\n          open={this.state.openDialog}\n          onClose={this.handleClose}\n          aria-label=\"Form to rename account - focus will be given to name input field\"\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <form>\n            <DialogTitle id=\"form-dialog-title\">Rename</DialogTitle>\n            <DialogContent>\n              <TextFieldWithFormState\n                autoFocus\n                fullWidth\n                label=\"Rename account\"\n                placeholder=\"Account alias\"\n                id=\"rename-account\"\n                fieldState={this.renameAccountForm.name}\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.handleClose} color=\"primary\">\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                onClick={this.handleUpdateName}\n                color=\"primary\"\n                disabled={this.renameAccountForm.submitDisabled}\n              >\n                Update\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n\n        <Dialog\n          fullScreen\n          open={this.state.openKeyDialog}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">Account Details</DialogTitle>\n          <DialogContent>\n            <List>\n              <ListSubheader>\n                <Typography variant={'h6'}>{this.state.alias}</Typography>\n              </ListSubheader>\n              <ListItem>\n                <IconButton\n                  edge={'start'}\n                  onClick={() => {\n                    copy(this.state.publicKeyHex!);\n                    this.setState({ copyStatus: true });\n                  }}\n                >\n                  <FilterNoneIcon />\n                </IconButton>\n                <ListItemText\n                  primary={`Public Key: ${this.state.publicKeyHex}`}\n                  style={{ overflowWrap: 'break-word' }}\n                />\n              </ListItem>\n              <ListItem>\n                <IconButton\n                  edge={'start'}\n                  onClick={() => {\n                    copy(this.state.accountHash!);\n                    this.setState({ copyStatus: true });\n                  }}\n                >\n                  <FilterNoneIcon />\n                </IconButton>\n                <ListItemText\n                  primary={`Account Hash: ${this.state.accountHash}`}\n                  style={{ overflowWrap: 'break-word' }}\n                />\n              </ListItem>\n            </List>\n            <Snackbar\n              open={this.state.copyStatus}\n              message=\"Copied!\"\n              autoHideDuration={1500}\n              onClose={this.handleCopyMessage}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    );\n  }\n}\nexport default withRouter(AccountManagementPage);\n"]},"metadata":{},"sourceType":"module"}