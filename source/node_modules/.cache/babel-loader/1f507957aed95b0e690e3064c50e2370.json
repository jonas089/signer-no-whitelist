{"ast":null,"code":"import owasp from 'owasp-password-strength-test';\nowasp.tests.required.push(password => {\n  const passwordString = password.toString();\n\n  if (passwordString.match(/correct\\s*horse\\s*battery\\s*staple/i) !== null) {\n    return 'Use your imagination not the example!';\n  }\n});\nexport const valueRequired = val => !val && 'Value required';\nexport const valuesMatch = (val1, val2) => !(val1 === val2) && 'Passwords must match';\nexport const isAlgorithm = val => !(val === 'ed25519' || val === 'secp256k1') && 'Invalid Algorithm';\nexport const fieldSubmittable = val => {\n  return val.hasBeenValidated && !val.hasError;\n};\nexport const minNameLength = val => {\n  return !(val.length > 2) && 'Invalid name - too short';\n};\nexport const humanReadable = val => {\n  // Accept any alphanumeric (also underscores)\n  const humanReadableRegex = /^[A-Za-zÀ-ÖØ-öø-ÿœ0-9_]+$/;\n  return !val.match(humanReadableRegex) && 'Invalid name - only use A-Z, a-z, 0-9 and _';\n};\nexport const strongPassword = val => {\n  const result = owasp.test(val);\n  return !result.strong && result.errors[0];\n};\nexport const uniqueAlias = (val, accounts) => {\n  const unique = !accounts.some(alias => {\n    return alias === val;\n  });\n  return !unique && 'This alias is already in use';\n};","map":{"version":3,"sources":["/home/chef/Desktop/signer/src/lib/FormValidator.ts"],"names":["owasp","tests","required","push","password","passwordString","toString","match","valueRequired","val","valuesMatch","val1","val2","isAlgorithm","fieldSubmittable","hasBeenValidated","hasError","minNameLength","length","humanReadable","humanReadableRegex","strongPassword","result","test","strong","errors","uniqueAlias","accounts","unique","some","alias"],"mappings":"AACA,OAAOA,KAAP,MAAkB,8BAAlB;AAEAA,KAAK,CAACC,KAAN,CAAYC,QAAZ,CAAqBC,IAArB,CAA2BC,QAAD,IAAsB;AAC9C,QAAMC,cAAc,GAAGD,QAAQ,CAACE,QAAT,EAAvB;;AACA,MAAID,cAAc,CAACE,KAAf,CAAqB,qCAArB,MAAgE,IAApE,EAA0E;AACxE,WAAO,uCAAP;AACD;AACF,CALD;AAOA,OAAO,MAAMC,aAAa,GAAIC,GAAD,IAAiB,CAACA,GAAD,IAAQ,gBAA/C;AAEP,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAeC,IAAf,KACzB,EAAED,IAAI,KAAKC,IAAX,KAAoB,sBADf;AAGP,OAAO,MAAMC,WAAW,GAAIJ,GAAD,IACzB,EAAEA,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,WAA/B,KAA+C,mBAD1C;AAGP,OAAO,MAAMK,gBAAgB,GAAIL,GAAD,IAA6B;AAC3D,SAAOA,GAAG,CAACM,gBAAJ,IAAwB,CAACN,GAAG,CAACO,QAApC;AACD,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAIR,GAAD,IAAiB;AAC5C,SAAO,EAAEA,GAAG,CAACS,MAAJ,GAAa,CAAf,KAAqB,0BAA5B;AACD,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAIV,GAAD,IAAiB;AAC5C;AACA,QAAMW,kBAAkB,GAAG,2BAA3B;AACA,SACE,CAACX,GAAG,CAACF,KAAJ,CAAUa,kBAAV,CAAD,IACA,6CAFF;AAID,CAPM;AASP,OAAO,MAAMC,cAAc,GAAIZ,GAAD,IAAiB;AAC7C,QAAMa,MAAM,GAAGtB,KAAK,CAACuB,IAAN,CAAWd,GAAX,CAAf;AACA,SAAO,CAACa,MAAM,CAACE,MAAR,IAAkBF,MAAM,CAACG,MAAP,CAAc,CAAd,CAAzB;AACD,CAHM;AAKP,OAAO,MAAMC,WAAW,GAAG,CAACjB,GAAD,EAAckB,QAAd,KAAqC;AAC9D,QAAMC,MAAM,GAAG,CAACD,QAAQ,CAACE,IAAT,CAAcC,KAAK,IAAI;AACrC,WAAOA,KAAK,KAAKrB,GAAjB;AACD,GAFe,CAAhB;AAGA,SAAO,CAACmB,MAAD,IAAW,8BAAlB;AACD,CALM","sourcesContent":["import { FieldState } from 'formstate';\nimport owasp from 'owasp-password-strength-test';\n\nowasp.tests.required.push((password: string) => {\n  const passwordString = password.toString() as String;\n  if (passwordString.match(/correct\\s*horse\\s*battery\\s*staple/i) !== null) {\n    return 'Use your imagination not the example!';\n  }\n});\n\nexport const valueRequired = (val: string) => !val && 'Value required';\n\nexport const valuesMatch = (val1: string, val2: string) =>\n  !(val1 === val2) && 'Passwords must match';\n\nexport const isAlgorithm = (val: string) =>\n  !(val === 'ed25519' || val === 'secp256k1') && 'Invalid Algorithm';\n\nexport const fieldSubmittable = (val: FieldState<string>) => {\n  return val.hasBeenValidated && !val.hasError;\n};\n\nexport const minNameLength = (val: string) => {\n  return !(val.length > 2) && 'Invalid name - too short';\n};\n\nexport const humanReadable = (val: string) => {\n  // Accept any alphanumeric (also underscores)\n  const humanReadableRegex = /^[A-Za-zÀ-ÖØ-öø-ÿœ0-9_]+$/;\n  return (\n    !val.match(humanReadableRegex) &&\n    'Invalid name - only use A-Z, a-z, 0-9 and _'\n  );\n};\n\nexport const strongPassword = (val: string) => {\n  const result = owasp.test(val);\n  return !result.strong && result.errors[0];\n};\n\nexport const uniqueAlias = (val: string, accounts: string[]) => {\n  const unique = !accounts.some(alias => {\n    return alias === val;\n  });\n  return !unique && 'This alias is already in use';\n};\n"]},"metadata":{},"sourceType":"module"}